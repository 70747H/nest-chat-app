var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.247,1,2.205]],["body/modules/AppModule.html",[0,1.805,1,4.234,2,1.359,3,1.359,4,1.598,5,1.598,6,1.359,7,2.274,8,1.598,9,2.451,10,2.451,11,3.168,12,0.027,13,3.463,14,3.168,15,3.168,16,2.274,17,1.598,18,1.598,19,0.191,20,0.163,21,0.163,22,2.151,23,2.895,24,0.477,25,0.574,26,1.926,27,1.171,28,2.906,29,4.136,30,4.06,31,2.151,32,4.815,33,2.906,34,2.906,35,2.451,36,2.451,37,2.451,38,2.151,39,1.747,40,2.906,41,2.906,42,2.906,43,2.906,44,0.823,45,3.06,46,2.451,47,2.906,48,2.906,49,2.451,50,2.906,51,2.906,52,2.906,53,2.906,54,2.906,55,2.906,56,2.906,57,4.136,58,0.946,59,2.906,60,2.906,61,2.906,62,2.906,63,1.926,64,1.26,65,0.191,66,0.16,67,0.012,68,0.016,69,0.012]],["title/controllers/AuthController.html",[70,1.683,71,2.205]],["body/controllers/AuthController.html",[12,0.027,19,0.203,20,0.173,21,0.173,24,0.376,25,0.611,58,1.408,64,1.342,65,0.203,66,0.17,67,0.012,68,0.017,69,0.012,70,2.521,71,2.865,72,2.61,73,2.29,74,4.982,75,2.051,76,0.332,77,1.224,78,4.548,79,3.991,80,2.61,81,3.58,82,1.51,83,4.323,84,0.672,85,3.095,86,1.785,87,5.878,88,3.896,89,1.224,90,1.063,91,0.564,92,1.224,93,1.224,94,2.338,95,2.61,96,4.323,97,3.095,98,4.201,99,2.61,100,3.095,101,2.521,102,2.61,103,2.29,104,2.29,105,3.095,106,2.051,107,1.447,108,3.095,109,3.095,110,3.095,111,3.095]],["title/classes/AuthCredentialsDto.html",[66,0.183,81,1.829]],["body/classes/AuthCredentialsDto.html",[12,0.026,19,0.242,20,0.206,21,0.206,24,0.278,65,0.242,66,0.267,67,0.015,68,0.019,69,0.015,76,0.395,81,2.678,82,1.701,84,0.757,88,3.614,91,0.635,112,0.907,113,4.597,114,3.109,115,1.379,116,2.55,117,2.025,118,3.687,119,3.687,120,3.687,121,3.687,122,3.278,123,3.278,124,3.278,125,3.687,126,3.687,127,3.687,128,2.028,129,3.687,130,4.87,131,3.687,132,3.687,133,3.687,134,3.687,135,1.201,136,3.687,137,3.687,138,3.687,139,4.597,140,3.687,141,4.87,142,4.87,143,3.687,144,1.598,145,3.687,146,3.687]],["title/modules/AuthModule.html",[0,1.247,11,1.829]],["body/modules/AuthModule.html",[0,1.828,2,1.391,3,1.391,4,1.636,5,1.636,6,1.391,7,2.682,8,2.682,11,3.556,12,0.027,16,2.313,17,1.636,18,1.636,19,0.195,20,0.167,21,0.167,23,1.789,24,0.468,25,0.587,26,1.972,27,1.198,44,0.843,64,1.823,65,0.195,66,0.163,67,0.012,68,0.017,69,0.012,71,3.233,101,3.246,102,2.509,147,2.509,148,2.509,149,2.509,150,3.857,151,3.528,152,2.202,153,2.975,154,2.202,155,3.922,156,2.202,157,2.975,158,2.975,159,1.506,160,1.972,161,2.975,162,2.509,163,2.509,164,1.636,165,2.975,166,2.975,167,2.509,168,2.975,169,2.975,170,2.975,171,2.975]],["title/injectables/AuthService.html",[101,1.683,172,1.162]],["body/injectables/AuthService.html",[12,0.027,19,0.176,20,0.15,21,0.15,24,0.437,25,0.531,27,1.083,44,1.433,58,1.5,65,0.176,66,0.148,67,0.011,68,0.015,69,0.011,76,0.288,77,1.107,78,3.297,79,2.893,80,3.297,81,3.326,84,0.787,86,1.399,89,1.433,90,1.244,91,0.66,92,1.433,93,1.305,94,2.193,95,3.297,101,1.978,103,1.989,104,1.989,107,1.828,116,2.366,154,1.989,159,2.839,160,1.782,164,1.478,172,1.365,173,1.478,174,2.267,175,2.436,176,4.608,177,1.36,178,1.989,179,5.789,180,2.688,181,2.688,182,2.688,183,2.688,184,2.783,185,2.688,186,2.893,187,1.616,188,1.989,189,2.351,190,1.36,191,1.989,192,1.465,193,2.688,194,1.575,195,2.688,196,2.688,197,2.15,198,1.273,199,2.688,200,2.688,201,3.91,202,2.688,203,2.267,204,2.267]],["title/classes/ChatGateway.html",[39,2,66,0.183]],["body/classes/ChatGateway.html",[12,0.027,19,0.101,20,0.086,21,0.086,24,0.356,25,0.305,39,1.528,44,1.335,63,2.749,65,0.101,66,0.085,67,0.006,68,0.01,69,0.006,76,0.166,77,0.72,82,1.31,84,0.793,86,1.496,89,1.335,90,1.16,91,0.752,92,1.335,93,1.263,106,1.024,107,1.514,112,0.38,115,0.72,116,1.514,117,1.782,135,1.222,151,2.063,175,2.215,177,0.781,192,1.555,194,2.116,197,1.781,198,1.35,205,1.302,206,1.684,207,3.238,208,3.238,209,3.238,210,2.682,211,3.238,212,2.541,213,2.541,214,2.541,215,2.541,216,2.541,217,2.541,218,1.544,219,2.593,220,2.386,221,1.544,222,2.541,223,0.928,224,0.928,225,2.541,226,1.544,227,3.752,228,3.238,229,1.544,230,2.541,231,1.544,232,1.024,233,2.541,234,5.839,235,3.238,236,1.544,237,2.541,238,1.544,239,2.541,240,5.254,241,4.461,242,2.541,243,1.544,244,2.541,245,2.541,246,1.544,247,2.541,248,2.541,249,1.544,250,1.544,251,2.541,252,1.302,253,1.143,254,1.302,255,1.544,256,1.544,257,1.544,258,1.544,259,1.684,260,1.544,261,1.544,262,1.544,263,1.544,264,1.544,265,1.544,266,2.303,267,2.73,268,3.238,269,2.541,270,1.544,271,0.928,272,1.544,273,1.638,274,2.541,275,0.928,276,1.544,277,1.544,278,4.147,279,2.396,280,1.544,281,3.238,282,4.147,283,1.947,284,2.73,285,3.238,286,1.544,287,2.541,288,1.302,289,2.541,290,3.238,291,1.544,292,1.684,293,1.544,294,1.544,295,1.544,296,1.544,297,1.544,298,1.544,299,1.544,300,2.541,301,2.541,302,1.544,303,1.544,304,1.544,305,1.544,306,1.544,307,2.73,308,1.544,309,1.544]],["title/modules/ChatModule.html",[0,1.247,13,2]],["body/modules/ChatModule.html",[0,2.066,2,1.763,3,1.763,4,2.074,5,2.074,6,1.763,7,2.718,8,2.074,11,3.427,12,0.027,13,3.953,14,3.427,15,3.427,16,2.718,17,2.074,18,2.074,19,0.247,20,0.211,21,0.211,23,2.971,24,0.458,25,0.744,39,2.971,64,1.634,65,0.247,66,0.207,67,0.015,68,0.02,69,0.015,310,3.771,311,3.771,312,3.771,313,3.771,314,3.771,315,3.771,316,3.771]],["title/classes/CreateMessageDto.html",[66,0.183,317,1.829]],["body/classes/CreateMessageDto.html",[12,0.026,19,0.251,20,0.214,21,0.214,24,0.289,65,0.251,66,0.274,67,0.015,68,0.02,69,0.015,76,0.411,82,1.939,84,0.863,91,0.724,112,0.942,115,1.413,117,1.743,122,3.538,123,3.001,124,3.538,128,2.105,144,2.551,271,3.339,273,2.81,275,3.339,317,2.745,318,4.962,319,2.833,320,4.991,321,3.828,322,2.833,323,3.228,324,3.828,325,3.228,326,3.228,327,4.682]],["title/classes/GetMessageFilterDto.html",[66,0.183,328,2]],["body/classes/GetMessageFilterDto.html",[12,0.026,19,0.255,20,0.218,21,0.218,24,0.38,65,0.255,66,0.307,67,0.015,68,0.02,69,0.015,76,0.417,82,1.761,84,0.784,91,0.657,112,0.956,115,1.428,122,3.363,123,2.337,124,3.363,128,2.138,135,1.822,144,2.566,273,2.831,275,3.363,325,3.278,326,4.717,327,4.717,328,3.031,329,4.717,330,3.278,331,5.041,332,3.888,333,3.888,334,3.888,335,3.888,336,3.278,337,5.041]],["title/classes/HttpExceptionFilter.html",[66,0.183,338,2.461]],["body/classes/HttpExceptionFilter.html",[12,0.027,19,0.22,20,0.188,21,0.188,24,0.345,25,0.662,38,2.482,44,1.581,65,0.22,66,0.184,67,0.013,68,0.018,69,0.013,76,0.36,77,1.294,84,0.71,89,0.95,90,0.825,91,0.596,92,0.95,93,0.95,112,0.825,115,1.294,192,1.948,198,1.692,206,3.029,210,3.623,223,2.016,224,2.016,232,2.223,283,3.125,338,3.381,339,4.383,340,2.223,341,4.383,342,4.57,343,2.828,344,3.381,345,4.706,346,3.846,347,4.706,348,2.828,349,2.482,350,3.853,351,4.383,352,2.482,353,3.354,354,2.828,355,2.828,356,2.828,357,3.354,358,3.354,359,3.853,360,3.354,361,3.354,362,3.354,363,3.354,364,2.828,365,2.828,366,3.354]],["title/interfaces/JwtPayload.html",[184,1.829,190,1.683]],["body/interfaces/JwtPayload.html",[12,0.026,19,0.309,20,0.264,21,0.264,65,0.309,67,0.019,68,0.023,69,0.019,76,0.505,91,0.614,115,1.61,116,2.965,117,2.132,184,3.126,189,2.832,190,2.383,367,4.71,368,3.972,369,3.972]],["title/injectables/JwtStrategy.html",[150,2,172,1.162]],["body/injectables/JwtStrategy.html",[12,0.027,19,0.218,20,0.186,21,0.186,24,0.454,25,0.658,27,1.342,44,0.944,58,1.085,65,0.218,66,0.183,67,0.013,68,0.018,69,0.013,76,0.357,77,1.288,84,0.707,86,1.381,89,1.288,90,1.119,91,0.593,92,1.288,93,0.944,107,1.558,116,2.127,150,2.735,156,2.465,159,3.043,160,2.208,164,2.502,167,2.809,172,1.589,173,1.832,175,2.086,177,1.686,178,2.465,184,3.061,186,3.366,187,2.003,189,2.003,190,1.686,191,2.465,192,1.249,194,1.342,197,1.832,198,1.085,203,2.809,204,2.809,370,2.809,371,5.18,372,3.332,373,3.332,374,3.332,375,3.332,376,3.332,377,3.332,378,2.809,379,1.444,380,3.332,381,3.332,382,3.332,383,3.332,384,3.332,385,2.003,386,3.332]],["title/classes/Message.html",[66,0.183,135,1.083]],["body/classes/Message.html",[12,0.027,19,0.174,20,0.148,21,0.148,24,0.379,65,0.174,66,0.146,67,0.011,68,0.015,69,0.011,76,0.284,82,2.105,84,0.937,86,1.795,90,0.952,91,0.786,112,0.652,115,1.097,117,1.352,135,1.261,144,2.42,266,2.764,271,2.749,273,2.314,275,2.749,379,1.678,385,1.595,387,2.237,388,3.071,389,3.466,390,2.566,391,2.566,392,2.566,393,3.384,394,2.652,395,3.265,396,3.265,397,4.24,398,4.24,399,2.652,400,3.265,401,2.652,402,3.957,403,2.652,404,5.028,405,2.652,406,2.652,407,3.031,408,1.758,409,3.384,410,1.963,411,1.758,412,1.963,413,1.758,414,1.963,415,1.963,416,1.963,417,2.237,418,3.856,419,1.963,420,1.963,421,1.068,422,1.963,423,2.237,424,2.652,425,2.652,426,3.265,427,2.652]],["title/classes/MessageRepository.html",[66,0.183,428,2]],["body/classes/MessageRepository.html",[12,0.026,19,0.248,20,0.212,21,0.212,24,0.417,44,1.072,58,1.232,65,0.248,66,0.208,67,0.015,68,0.02,69,0.015,76,0.406,77,1.403,84,0.588,89,1.072,90,0.931,91,0.494,92,1.072,93,1.072,94,2.147,112,0.931,135,1.908,175,2.224,194,1.524,198,1.232,271,2.978,273,2.507,275,2.978,317,3.222,379,2.147,421,1.524,428,2.978,429,3.191,430,3.66,431,4.086,432,3.785,433,3.785,434,2.801,435,2.801,436,2.801,437,2.801,438,3.785,439,3.785,440,3.785,441,3.785,442,3.785,443,4.177,444,3.191,445,3.191]],["title/controllers/MessagesController.html",[70,1.683,446,2.205]],["body/controllers/MessagesController.html",[12,0.027,19,0.16,20,0.136,21,0.136,24,0.435,25,0.48,58,1.68,64,1.055,65,0.16,66,0.134,67,0.01,68,0.014,69,0.01,70,1.231,73,1.801,76,0.261,77,1.029,82,1.802,84,0.802,86,1.893,89,1.461,90,1.269,91,0.673,92,1.461,93,1.461,94,2.601,98,3.064,99,3.666,106,1.613,107,1.138,135,1.183,144,2.555,220,2.2,317,2.977,328,3.254,389,3.254,422,1.801,431,2.688,435,1.801,436,1.801,437,2.688,443,2.052,446,2.408,447,2.052,448,1.801,449,3.064,450,3.633,451,3.064,452,3.064,453,2.052,454,2.433,455,2.052,456,3.633,457,2.433,458,2.433,459,2.433,460,2.052,461,3.633,462,2.433,463,2.052,464,3.466,465,3.633,466,2.433,467,2.433,468,4.822,469,2.433,470,2.433,471,3.217,472,2.433,473,2.433,474,2.052,475,2.052,476,2.052,477,1.801,478,2.433,479,2.433,480,2.433,481,2.433,482,2.433,483,2.433,484,2.433,485,2.433,486,2.433,487,2.433,488,2.433,489,2.433]],["title/modules/MessagesModule.html",[0,1.247,14,1.829]],["body/modules/MessagesModule.html",[0,2.07,2,1.77,3,1.77,4,2.081,5,2.081,6,1.77,7,3.037,8,3.037,12,0.027,14,3.496,16,2.724,17,2.081,18,2.081,19,0.248,20,0.212,21,0.212,23,2.275,24,0.459,25,0.747,26,2.509,27,1.524,64,2.147,65,0.248,66,0.208,67,0.015,68,0.02,69,0.015,220,3.376,428,2.275,446,3.66,474,3.191,490,3.191,491,3.191,492,3.191,493,3.785,494,3.785,495,3.191,496,3.785]],["title/injectables/MessagesService.html",[172,1.162,220,1.683]],["body/injectables/MessagesService.html",[12,0.026,19,0.163,20,0.14,21,0.14,24,0.427,25,0.492,27,1.004,44,1.048,58,1.589,65,0.163,66,0.137,67,0.015,68,0.015,69,0.01,76,0.267,77,1.048,84,0.849,89,1.547,90,1.343,91,0.712,92,1.547,93,1.477,94,2.517,107,1.166,135,1.205,144,2.572,172,1.292,173,1.372,175,2.497,177,1.262,187,1.499,192,0.935,194,1.966,197,2.035,198,1.205,220,1.872,317,2.867,328,3.135,389,3.135,428,3.284,431,2.738,435,1.845,436,1.845,437,2.738,449,3.12,451,3.12,452,3.12,453,3.12,455,3.12,460,3.12,463,3.12,464,3.491,475,2.103,476,2.103,477,1.845,495,2.103,497,2.103,498,3.7,499,2.494,500,2.494,501,2.494,502,2.494,503,2.494,504,3.7,505,2.494,506,2.494,507,1.653,508,2.494,509,2.494,510,2.494,511,3.858,512,2.494,513,2.103,514,3.7,515,2.494,516,2.494,517,2.103,518,2.494,519,2.103,520,2.103]],["title/classes/QueryFailedExceptionFilter.html",[66,0.183,521,2.461]],["body/classes/QueryFailedExceptionFilter.html",[12,0.027,19,0.207,20,0.177,21,0.177,24,0.38,25,0.624,38,2.341,44,1.676,65,0.207,66,0.174,67,0.013,68,0.017,69,0.013,76,0.339,77,1.243,84,0.682,89,0.896,90,0.778,91,0.572,92,0.896,93,0.896,112,0.778,115,1.243,135,1.429,192,1.889,198,1.641,206,2.909,210,3.559,223,1.902,224,1.902,232,2.097,283,3.031,340,2.097,341,4.25,344,3.248,345,2.667,346,3.73,347,4.591,348,2.667,349,3.248,350,4.25,351,3.701,352,2.341,354,2.667,356,2.667,364,2.667,365,2.667,421,1.274,521,3.248,522,4.25,523,4.25,524,4.389,525,4.591,526,2.667,527,3.163,528,3.163,529,2.667,530,3.163,531,3.163,532,4.389,533,3.163,534,3.163]],["title/classes/Room.html",[66,0.183,266,1.555]],["body/classes/Room.html",[12,0.027,19,0.197,20,0.169,21,0.169,24,0.402,65,0.197,66,0.165,67,0.012,68,0.017,69,0.012,76,0.323,82,2.091,84,0.931,86,1.706,90,1.207,91,0.781,112,0.741,115,1.201,117,1.481,135,1.829,144,1.838,266,1.983,379,1.838,385,1.81,388,3.205,389,2.951,390,2.811,391,2.811,392,2.811,393,3.632,402,3.632,407,3.254,408,1.996,409,3.632,410,2.228,411,1.996,412,2.228,413,1.996,414,2.228,415,2.228,416,2.228,419,3.632,420,2.228,421,1.213,422,2.228,445,2.539,448,3.632,535,2.539,536,4.909,537,3.576,538,3.576,539,3.011,540,3.011,541,3.011,542,3.011,543,2.539,544,3.011,545,3.011,546,3.011]],["title/classes/RoomRepository.html",[66,0.183,547,2]],["body/classes/RoomRepository.html",[12,0.023,19,0.315,20,0.269,21,0.269,24,0.434,65,0.315,66,0.264,67,0.019,68,0.023,69,0.019,112,1.181,266,2.245,379,2.492,421,1.933,430,4.08,434,3.552,547,3.457,548,4.048,549,4.048,550,4.8]],["title/controllers/RoomsController.html",[70,1.683,551,2.205]],["body/controllers/RoomsController.html",[12,0.026,19,0.319,20,0.273,21,0.273,24,0.367,25,0.961,64,2.111,65,0.319,66,0.267,67,0.019,68,0.023,69,0.019,70,2.465,73,3.604,551,3.844,552,4.107,553,4.87,554,4.87]],["title/modules/RoomsModule.html",[0,1.247,15,1.829]],["body/modules/RoomsModule.html",[0,2.07,2,1.77,3,1.77,4,2.081,5,2.081,6,1.77,7,3.037,8,3.037,12,0.027,15,3.496,16,2.724,17,2.081,18,2.081,19,0.248,20,0.212,21,0.212,23,2.275,24,0.459,25,0.747,26,2.509,27,1.524,64,2.147,65,0.248,66,0.208,67,0.015,68,0.02,69,0.015,219,3.669,547,2.275,551,3.66,555,3.191,556,3.191,557,3.191,558,3.785,559,3.785,560,3.785,561,3.191,562,3.785]],["title/injectables/RoomsService.html",[172,1.162,219,1.829]],["body/injectables/RoomsService.html",[12,0.027,19,0.231,20,0.197,21,0.197,24,0.429,25,0.695,27,1.417,44,0.997,58,1.537,65,0.231,66,0.193,67,0.014,68,0.019,69,0.014,76,0.377,77,1.337,84,0.828,89,1.337,90,1.46,91,0.616,92,1.337,93,1.337,94,2.046,107,1.645,117,1.86,172,1.649,173,1.935,175,2.145,177,1.781,187,2.116,192,1.319,194,1.417,197,1.935,198,1.146,219,2.596,266,1.645,507,2.332,511,3.941,513,2.967,547,3.674,549,2.967,561,2.967,563,2.967,564,4.72,565,5.692,566,3.519,567,3.519,568,4.72,569,3.519,570,3.519,571,3.519,572,3.519,573,3.519,574,3.519]],["title/classes/TimeStampEntity.html",[66,0.183,388,1.829]],["body/classes/TimeStampEntity.html",[12,0.027,19,0.257,20,0.219,21,0.219,24,0.296,65,0.257,66,0.215,67,0.016,68,0.02,69,0.016,76,0.42,82,1.961,84,0.873,91,0.732,112,0.964,115,1.435,379,2.196,385,3.046,388,2.786,390,3.722,391,3.722,392,3.722,407,4.174,408,2.597,411,3.722,413,3.722,421,1.578,575,3.304,576,5.615,577,3.918,578,3.918,579,3.918,580,5.067,581,3.918]],["title/classes/UpdateMessageDto.html",[66,0.183,464,2]],["body/classes/UpdateMessageDto.html",[12,0.026,19,0.292,20,0.249,21,0.249,24,0.336,65,0.292,66,0.302,67,0.018,68,0.022,69,0.018,76,0.478,82,1.557,84,0.693,91,0.581,112,1.097,115,1.557,117,1.92,122,3.305,123,3.305,124,3.305,128,2.452,271,3.584,319,3.299,322,3.299,323,3.76,464,3.305,582,4.636]],["title/classes/UpdateUserDto.html",[66,0.183,583,2.205]],["body/classes/UpdateUserDto.html",[12,0.026,19,0.271,20,0.231,21,0.231,24,0.311,65,0.271,66,0.288,67,0.016,68,0.021,69,0.016,76,0.443,82,1.83,84,0.815,91,0.683,112,1.015,115,1.484,117,1.83,122,3.46,123,3.46,124,3.15,128,2.27,144,2.271,273,2.912,292,3.814,322,3.876,583,3.472,584,4.853,585,3.481,586,4.128,587,4.128,588,4.128]],["title/classes/User.html",[66,0.183,86,1.01]],["body/classes/User.html",[12,0.027,19,0.139,20,0.119,21,0.119,24,0.367,44,0.601,49,3.792,58,0.692,65,0.139,66,0.117,67,0.008,68,0.013,69,0.008,75,1.408,76,0.228,77,0.928,82,2.059,84,0.93,86,1.366,88,3.404,89,0.601,90,0.984,91,0.78,92,0.601,93,0.601,94,1.42,112,0.522,115,0.928,116,2.272,117,2.117,135,1.582,144,1.42,175,1.611,194,0.855,266,2.272,273,2.024,292,2.652,379,1.42,385,1.277,388,2.824,389,2.922,390,2.172,391,2.172,392,2.172,393,2.96,395,1.791,396,1.791,397,3.792,398,2.763,400,2.763,402,4.196,407,2.652,408,1.408,409,2.96,410,1.572,411,1.408,412,1.572,413,1.408,414,1.572,415,1.572,416,2.96,417,1.791,418,2.763,419,2.425,420,1.572,421,0.855,423,1.791,426,1.791,444,1.791,448,3.596,537,1.791,538,1.791,543,1.791,589,1.791,590,4.001,591,3.373,592,3.277,593,3.277,594,4.498,595,2.124,596,2.124,597,2.124,598,2.124,599,3.277,600,2.124,601,2.124,602,2.124,603,2.124,604,3.277,605,2.124,606,1.791,607,1.572,608,2.124,609,2.124,610,2.124,611,3.277,612,1.791,613,2.124,614,2.124]],["title/classes/UserRepository.html",[66,0.183,159,1.683]],["body/classes/UserRepository.html",[12,0.027,19,0.179,20,0.153,21,0.153,24,0.408,25,0.539,44,1.12,58,1.514,65,0.179,66,0.15,67,0.011,68,0.016,69,0.011,76,0.293,77,1.12,79,3.441,81,3.2,84,0.723,86,1.412,88,3.083,89,1.317,90,1.144,91,0.606,92,1.317,93,1.317,94,2.445,103,2.022,104,2.022,112,0.672,116,2.384,117,1.97,159,2.002,175,2.446,188,2.022,192,1.743,194,2.179,197,2.176,198,1.288,267,2.304,279,2.927,283,1.643,284,2.304,288,2.304,307,2.304,379,1.715,421,1.1,430,3.083,434,2.022,591,4.299,606,2.304,607,2.022,612,2.304,615,2.304,616,3.956,617,4.651,618,3.956,619,2.732,620,2.732,621,2.732,622,2.732,623,2.732,624,2.732,625,3.956,626,2.732,627,2.732,628,3.956,629,2.732,630,2.732,631,2.732,632,2.732,633,2.732,634,2.732,635,2.732,636,2.732,637,2.732,638,2.732,639,2.732]],["title/injectables/UsersService.html",[151,1.829,172,1.162]],["body/injectables/UsersService.html",[12,0.027,19,0.192,20,0.164,21,0.164,24,0.42,25,0.579,27,1.181,58,1.715,65,0.192,66,0.161,67,0.012,68,0.016,69,0.012,76,0.314,77,1.179,84,0.865,86,0.89,89,1.491,90,1.295,91,0.687,92,1.491,93,1.491,94,2.504,107,1.371,116,1.946,117,2.157,151,2.289,159,2.923,160,1.943,172,1.453,173,1.612,175,2.487,177,1.484,178,2.169,186,2.169,187,1.763,188,2.169,191,2.169,192,1.099,194,1.181,292,1.943,477,2.169,507,1.943,511,2.169,519,2.472,520,2.472,583,4.024,640,2.472,641,4.162,642,4.162,643,5.266,644,4.162,645,2.932,646,4.162,647,2.932,648,4.162,649,2.932,650,2.932,651,4.162,652,2.932,653,2.932,654,2.932,655,2.932,656,2.932,657,2.932]],["title/classes/WsExceptionFilter.html",[66,0.183,259,2.205]],["body/classes/WsExceptionFilter.html",[12,0.027,19,0.236,20,0.202,21,0.202,24,0.407,25,0.712,44,1.022,63,2.391,65,0.236,66,0.198,67,0.014,68,0.019,69,0.014,76,0.387,77,1.359,84,0.746,89,1.022,90,0.887,91,0.47,92,1.022,93,1.022,112,0.887,115,1.359,135,1.175,192,2.022,198,1.563,210,3.701,223,2.169,224,2.169,232,2.391,252,4.047,253,2.669,259,3.181,283,3.243,340,2.391,343,3.042,344,3.551,346,3.991,349,2.669,359,3.042,379,2.08,421,1.453,507,3.181,525,4.047,526,3.042,658,4.548,659,5.394,660,4.8,661,3.608,662,3.608,663,3.608,664,3.608,665,3.608,666,3.608]],["title/guards/WsJwtGuard.html",[667,2.461,668,2.461]],["body/guards/WsJwtGuard.html",[12,0.027,19,0.204,20,0.174,21,0.174,24,0.444,25,0.613,30,5.092,31,2.297,44,1.609,58,1.011,63,2.058,65,0.204,66,0.17,67,0.012,68,0.017,69,0.012,76,0.333,77,1.227,84,0.674,86,1.64,89,1.227,90,1.066,91,0.565,92,1.227,93,0.879,101,2.978,106,2.058,115,0.879,164,1.707,172,1.513,175,2.01,177,1.571,184,2.745,189,1.866,190,1.571,192,1.871,194,1.25,198,1.011,206,2.058,210,3.247,279,2.297,529,2.618,668,3.206,669,3.105,670,4.208,671,2.618,672,5.401,673,3.105,674,3.105,675,4.333,676,4.554,677,3.105,678,3.105,679,3.105,680,3.105,681,3.105,682,3.105,683,3.105,684,3.105,685,3.105,686,3.105,687,3.105,688,3.105,689,3.105,690,3.105,691,3.105,692,3.105,693,3.105,694,3.105,695,3.105]],["title/coverage.html",[696,3.362]],["body/coverage.html",[6,1.181,12,0.027,21,0.141,22,1.869,39,1.518,45,1.869,66,0.353,67,0.01,68,0.015,69,0.01,70,2.249,71,1.674,72,2.129,81,1.389,86,0.767,91,0.329,101,1.278,113,2.129,114,2.129,135,1.216,150,1.518,151,1.389,152,1.869,155,1.869,159,1.278,172,1.83,174,2.129,184,1.389,189,1.518,190,1.278,198,0.822,205,2.129,219,1.389,220,1.278,259,1.674,266,1.181,317,1.389,318,2.129,319,2.764,328,1.518,329,2.129,330,2.129,338,1.869,339,2.129,340,2.946,368,2.129,369,2.129,370,2.129,387,2.129,388,1.389,428,1.518,429,2.129,446,1.674,447,2.129,464,1.518,471,1.869,497,2.129,517,5.684,521,1.869,522,2.129,523,2.129,535,2.129,547,1.518,548,2.129,551,1.674,552,2.129,563,2.129,575,2.129,582,2.129,583,1.674,584,2.129,585,2.129,589,2.129,615,2.129,640,2.129,658,2.129,667,1.869,668,1.869,670,2.129,671,2.129,696,1.869,697,2.129,698,2.525,699,2.525,700,4.911,701,5.677,702,5.677,703,5.241,704,2.129,705,2.525,706,2.525,707,2.525,708,2.525,709,2.129,710,2.129,711,4.444,712,2.525,713,2.525,714,3.735,715,3.735,716,2.525,717,2.525,718,2.129,719,2.129,720,2.525,721,2.525]],["title/dependencies.html",[3,1.871,722,2.776]],["body/dependencies.html",[3,1.693,12,0.027,25,0.715,27,1.458,31,2.679,35,3.053,36,3.053,66,0.264,67,0.014,68,0.019,69,0.014,128,1.991,154,2.679,156,2.679,164,1.991,253,2.679,254,3.053,336,3.053,352,3.56,378,4.057,421,1.458,607,2.679,723,5.403,724,3.621,725,3.621,726,3.621,727,4.811,728,4.811,729,4.811,730,3.621,731,3.621,732,3.621,733,3.621,734,3.621,735,3.621,736,3.621,737,3.621,738,3.621,739,3.621,740,3.621,741,3.621,742,3.621,743,3.621,744,3.621,745,3.621,746,3.621,747,3.621,748,3.621,749,3.621,750,3.621,751,3.053,752,3.621,753,3.621,754,3.621,755,3.621,756,3.621,757,3.621,758,3.053,759,3.621]],["title/miscellaneous/functions.html",[760,1.84,761,3.374]],["body/miscellaneous/functions.html",[6,2.957,12,0.024,67,0.02,68,0.024,69,0.02,76,0.549,704,4.317,760,3.393,761,4.317,762,5.119]],["title/index.html",[76,0.298,763,2.776,764,2.776]],["body/index.html",[12,0.027,20,0.188,37,2.838,67,0.013,68,0.018,69,0.013,75,2.23,430,2.23,696,2.49,697,3.862,751,2.838,758,2.838,765,5.207,766,3.365,767,3.365,768,3.365,769,6.368,770,3.365,771,3.365,772,3.365,773,4.58,774,6.368,775,5.207,776,3.365,777,3.365,778,3.365,779,3.365,780,4.39,781,3.365,782,4.58,783,3.365,784,3.365,785,3.365,786,3.365,787,4.58,788,2.838,789,3.365,790,4.58,791,3.365,792,3.365,793,3.365,794,3.365,795,3.365,796,3.365,797,3.365,798,3.365,799,3.365,800,3.862,801,4.58,802,4.58,803,3.365,804,3.365,805,3.365,806,3.365,807,3.365,808,3.365,809,3.365,810,3.365,811,3.365,812,3.365,813,3.365,814,3.365,815,3.365,816,3.365,817,3.365,818,3.365,819,3.365,820,3.365,821,3.365]],["title/modules.html",[2,2.125]],["body/modules.html",[1,3.107,2,2.192,11,2.578,12,0.022,13,2.819,14,2.578,15,2.578,67,0.019,68,0.022,69,0.019,800,5.466,822,6.482,823,6.482,824,6.482]],["title/overview.html",[825,3.831]],["body/overview.html",[0,1.171,1,4.206,2,1.461,3,1.461,4,1.718,5,1.718,6,1.461,7,1.718,8,1.718,9,2.634,10,2.634,11,3.585,12,0.027,13,3.767,14,3.327,15,3.327,16,2.393,17,1.718,18,1.718,64,1.354,67,0.012,68,0.017,69,0.012,101,3.061,112,0.768,139,3.669,147,2.634,148,2.634,149,2.634,150,3.637,151,3.327,173,1.718,190,1.581,219,3.327,220,3.061,490,2.634,491,2.634,492,2.634,555,2.634,556,2.634,557,2.634,667,2.311,825,2.634,826,4.351,827,3.124,828,3.124]],["title/miscellaneous/variables.html",[760,1.84,829,3.374]],["body/miscellaneous/variables.html",[12,0.026,22,2.957,44,1.132,45,3.797,46,3.37,58,1.301,67,0.016,68,0.02,69,0.016,75,2.649,76,0.429,86,1.214,152,2.957,155,3.797,162,3.37,163,3.37,164,2.198,198,1.301,223,3.596,224,3.596,355,3.37,471,3.797,676,3.37,709,3.37,710,4.327,718,3.37,719,4.327,760,2.649,780,3.37,788,3.37,829,3.37,830,3.996,831,3.996,832,3.996,833,3.996,834,3.996,835,3.996,836,3.996,837,3.996,838,3.996,839,3.996,840,3.996,841,3.996,842,3.996,843,3.996,844,3.996,845,3.996]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"classes/RoomRepository.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":517,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["0.2.29",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["0.6.1",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":139,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"overview.html":{}}}],["100",{"_index":706,"title":{},"body":{"coverage.html":{}}}],["14.14.6",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["16",{"_index":828,"title":{},"body":{"overview.html":{}}}],["2.1.4",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["23505",{"_index":634,"title":{},"body":{"classes/UserRepository.html":{}}}],["3",{"_index":827,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["4.0.0",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["4.0.5",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["4.17.8",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["4.7.9",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["4/13",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":826,"title":{},"body":{"overview.html":{}}}],["6.6.3",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["7.6.5",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["70747h",{"_index":818,"title":{},"body":{"index.html":{}}}],["8.5.1",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["accesstoken",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["addbearerauth",{"_index":844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtag('test",{"_index":843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["afterinit",{"_index":212,"title":{},"body":{"classes/ChatGateway.html":{}}}],["afterinit(server",{"_index":230,"title":{},"body":{"classes/ChatGateway.html":{}}}],["already",{"_index":636,"title":{},"body":{"classes/UserRepository.html":{}}}],["amazing",{"_index":808,"title":{},"body":{"index.html":{}}}],["api",{"_index":788,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":771,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":235,"title":{},"body":{"classes/ChatGateway.html":{}}}],["argumentshost",{"_index":347,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{}}}],["async",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JwtStrategy.html":{},"classes/MessageRepository.html":{},"injectables/MessagesService.html":{},"injectables/RoomsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{}}}],["auth",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":314,"title":{},"body":{"modules/ChatModule.html":{}}}],["auth/get",{"_index":472,"title":{},"body":{"controllers/MessagesController.html":{}}}],["auth/user.entity",{"_index":422,"title":{},"body":{"classes/Message.html":{},"controllers/MessagesController.html":{},"classes/Room.html":{}}}],["auth/users.service",{"_index":256,"title":{},"body":{"classes/ChatGateway.html":{}}}],["authcontroller",{"_index":71,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authcredentialsdto",{"_index":81,"title":{"classes/AuthCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["authheader",{"_index":684,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["authheader.length",{"_index":688,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["authheader.substring(7",{"_index":687,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":817,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":101,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"overview.html":{}}}],["authtoken",{"_index":686,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["available",{"_index":793,"title":{},"body":{"index.html":{}}}],["await",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JwtStrategy.html":{},"classes/MessageRepository.html":{},"injectables/MessagesService.html":{},"injectables/RoomsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{}}}],["backers",{"_index":809,"title":{},"body":{"index.html":{}}}],["baseentity",{"_index":576,"title":{},"body":{"classes/TimeStampEntity.html":{}}}],["basewsexceptionfilter",{"_index":659,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["bcrypt",{"_index":606,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["bcrypt.gensalt",{"_index":629,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt.hash(password",{"_index":612,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["bcryptjs",{"_index":607,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["body",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{}}}],["boolean(user",{"_index":695,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/RoomsModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":824,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":822,"title":{},"body":{"modules.html":{}}}],["build",{"_index":845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":672,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["canactivate(context",{"_index":675,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["case",{"_index":141,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["catch",{"_index":283,"title":{},"body":{"classes/ChatGateway.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/UserRepository.html":{},"classes/WsExceptionFilter.html":{}}}],["catch(error",{"_index":661,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["catch(exception",{"_index":344,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/WsExceptionFilter.html":{}}}],["catch(httpexception",{"_index":353,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(queryfailederror",{"_index":528,"title":{},"body":{"classes/QueryFailedExceptionFilter.html":{}}}],["changed",{"_index":305,"title":{},"body":{"classes/ChatGateway.html":{}}}],["character",{"_index":146,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["chat",{"_index":264,"title":{},"body":{"classes/ChatGateway.html":{}}}],["chat.gateway",{"_index":313,"title":{},"body":{"modules/ChatModule.html":{}}}],["chatgateway",{"_index":39,"title":{"classes/ChatGateway.html":{}},"body":{"modules/AppModule.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"coverage.html":{}}}],["chatmodule",{"_index":13,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["class",{"_index":66,"title":{"classes/AuthCredentialsDto.html":{},"classes/ChatGateway.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"classes/RoomRepository.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/WsExceptionFilter.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"classes/RoomRepository.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":112,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/ChatGateway.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"classes/RoomRepository.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/WsExceptionFilter.html":{},"overview.html":{}}}],["client",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"classes/ChatGateway.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{}}}],["client.data.headers.authorization.split",{"_index":685,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["client.emit('exception",{"_index":664,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["client.emit('joinedroom",{"_index":294,"title":{},"body":{"classes/ChatGateway.html":{}}}],["client.emit('leftroom",{"_index":298,"title":{},"body":{"classes/ChatGateway.html":{}}}],["client.id",{"_index":290,"title":{},"body":{"classes/ChatGateway.html":{}}}],["client.join(room.name",{"_index":293,"title":{},"body":{"classes/ChatGateway.html":{}}}],["client.leave(data.room",{"_index":297,"title":{},"body":{"classes/ChatGateway.html":{}}}],["client.server.emit('users",{"_index":304,"title":{},"body":{"classes/ChatGateway.html":{}}}],["client_id",{"_index":593,"title":{},"body":{"classes/User.html":{}}}],["clientid",{"_index":292,"title":{},"body":{"classes/ChatGateway.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_chatmodule",{"_index":310,"title":{},"body":{"modules/ChatModule.html":{}}}],["cluster_chatmodule_imports",{"_index":311,"title":{},"body":{"modules/ChatModule.html":{}}}],["cluster_messagesmodule",{"_index":490,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_exports",{"_index":491,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_providers",{"_index":492,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_roomsmodule",{"_index":555,"title":{},"body":{"modules/RoomsModule.html":{},"overview.html":{}}}],["cluster_roomsmodule_exports",{"_index":556,"title":{},"body":{"modules/RoomsModule.html":{},"overview.html":{}}}],["cluster_roomsmodule_providers",{"_index":557,"title":{},"body":{"modules/RoomsModule.html":{},"overview.html":{}}}],["code",{"_index":790,"title":{},"body":{"index.html":{}}}],["column",{"_index":402,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/User.html":{}}}],["column({name",{"_index":400,"title":{},"body":{"classes/Message.html":{},"classes/User.html":{}}}],["command",{"_index":792,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":796,"title":{},"body":{"index.html":{}}}],["config",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('database",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["config/config",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"guards/WsJwtGuard.html":{}}}],["conflictexception",{"_index":624,"title":{},"body":{"classes/UserRepository.html":{}}}],["conflictexception('username",{"_index":635,"title":{},"body":{"classes/UserRepository.html":{}}}],["connected",{"_index":303,"title":{},"body":{"classes/ChatGateway.html":{}}}],["connectedusers",{"_index":536,"title":{},"body":{"classes/Room.html":{}}}],["console.log('aaaaaaaaaaaaaaaa",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MessageRepository.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"injectables/RoomsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JwtStrategy.html":{},"injectables/MessagesService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{}}}],["constructor(@injectrepository(messagerepository",{"_index":508,"title":{},"body":{"injectables/MessagesService.html":{}}}],["constructor(@injectrepository(roomrepository",{"_index":571,"title":{},"body":{"injectables/RoomsService.html":{}}}],["constructor(@injectrepository(userrepository",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":673,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["constructor(messagerepository",{"_index":499,"title":{},"body":{"injectables/MessagesService.html":{}}}],["constructor(private",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChatGateway.html":{},"controllers/MessagesController.html":{},"guards/WsJwtGuard.html":{}}}],["constructor(roomrepository",{"_index":566,"title":{},"body":{"injectables/RoomsService.html":{}}}],["constructor(userrepository",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":218,"title":{},"body":{"classes/ChatGateway.html":{}}}],["contain",{"_index":138,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["context",{"_index":529,"title":{},"body":{"classes/QueryFailedExceptionFilter.html":{},"guards/WsJwtGuard.html":{}}}],["context.getrequest",{"_index":531,"title":{},"body":{"classes/QueryFailedExceptionFilter.html":{}}}],["context.getresponse",{"_index":530,"title":{},"body":{"classes/QueryFailedExceptionFilter.html":{}}}],["context.switchtows().getclient",{"_index":683,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["context.switchtows().getdata().user",{"_index":692,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["controller",{"_index":70,"title":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"controllers/RoomsController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('messages",{"_index":478,"title":{},"body":{"controllers/MessagesController.html":{}}}],["controller('rooms",{"_index":554,"title":{},"body":{"controllers/RoomsController.html":{}}}],["controllers",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"overview.html":{}}}],["coverage",{"_index":696,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["created_at",{"_index":390,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/TimeStampEntity.html":{},"classes/User.html":{}}}],["createdatecolumn",{"_index":580,"title":{},"body":{"classes/TimeStampEntity.html":{}}}],["createdatecolumn({update",{"_index":408,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/TimeStampEntity.html":{},"classes/User.html":{}}}],["createmessage",{"_index":431,"title":{},"body":{"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["createmessage(@body",{"_index":484,"title":{},"body":{"controllers/MessagesController.html":{}}}],["createmessage(createmessagedto",{"_index":453,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["createmessage(undefined",{"_index":432,"title":{},"body":{"classes/MessageRepository.html":{}}}],["createmessagedto",{"_index":317,"title":{"classes/CreateMessageDto.html":{}},"body":{"classes/CreateMessageDto.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"coverage.html":{}}}],["createparamdecorator((data",{"_index":834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["credentials",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentials.dto",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["credentials.dto.ts",{"_index":114,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:17",{"_index":119,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["credentials.dto.ts:9",{"_index":121,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["ctx",{"_index":355,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":358,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":357,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":240,"title":{},"body":{"classes/ChatGateway.html":{}}}],["data.message",{"_index":272,"title":{},"body":{"classes/ChatGateway.html":{}}}],["data.room",{"_index":299,"title":{},"body":{"classes/ChatGateway.html":{}}}],["date",{"_index":407,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/TimeStampEntity.html":{},"classes/User.html":{}}}],["date().toisostring",{"_index":365,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{}}}],["date.now",{"_index":282,"title":{},"body":{"classes/ChatGateway.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/RoomsModule.html":{},"overview.html":{}}}],["decorators",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"classes/ChatGateway.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"classes/Room.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["default",{"_index":223,"title":{},"body":{"classes/ChatGateway.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/WsExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"injectables/RoomsService.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{}}}],["delete",{"_index":443,"title":{},"body":{"classes/MessageRepository.html":{},"controllers/MessagesController.html":{}}}],["delete('/:id",{"_index":456,"title":{},"body":{"controllers/MessagesController.html":{}}}],["deleted_at",{"_index":391,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/TimeStampEntity.html":{},"classes/User.html":{}}}],["deletedatecolumn",{"_index":411,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/TimeStampEntity.html":{},"classes/User.html":{}}}],["deletemessage",{"_index":449,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["deletemessage(@param('id",{"_index":486,"title":{},"body":{"controllers/MessagesController.html":{}}}],["deletemessage(id",{"_index":455,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/RoomsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"classes/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":772,"title":{},"body":{"index.html":{}}}],["disconnected",{"_index":309,"title":{},"body":{"classes/ChatGateway.html":{}}}],["docs",{"_index":787,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":697,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentbuilder",{"_index":838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto/auth",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["dto/create",{"_index":436,"title":{},"body":{"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["dto/get",{"_index":475,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["dto/update",{"_index":477,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":284,"title":{},"body":{"classes/ChatGateway.html":{},"classes/UserRepository.html":{}}}],["e2e",{"_index":783,"title":{},"body":{"index.html":{}}}],["email",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["entity",{"_index":416,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/User.html":{}}}],["entity('messages",{"_index":424,"title":{},"body":{"classes/Message.html":{}}}],["entity('rooms",{"_index":544,"title":{},"body":{"classes/Room.html":{}}}],["entity('users",{"_index":608,"title":{},"body":{"classes/User.html":{}}}],["entityrepository",{"_index":434,"title":{},"body":{"classes/MessageRepository.html":{},"classes/RoomRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(message",{"_index":438,"title":{},"body":{"classes/MessageRepository.html":{}}}],["entityrepository(room",{"_index":550,"title":{},"body":{"classes/RoomRepository.html":{}}}],["entityrepository(user",{"_index":626,"title":{},"body":{"classes/UserRepository.html":{}}}],["env",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env/.${env}.env",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["env/.env",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":665,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["errorresponse",{"_index":533,"title":{},"body":{"classes/QueryFailedExceptionFilter.html":{}}}],["event",{"_index":306,"title":{},"body":{"classes/ChatGateway.html":{}}}],["exception",{"_index":349,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/WsExceptionFilter.html":{}}}],["exception.filter",{"_index":261,"title":{},"body":{"classes/ChatGateway.html":{}}}],["exception.filter.ts",{"_index":340,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/WsExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:6",{"_index":343,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsExceptionFilter.html":{}}}],["exception.filter.ts:7",{"_index":348,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{}}}],["exception.filter.ts:8",{"_index":526,"title":{},"body":{"classes/QueryFailedExceptionFilter.html":{},"classes/WsExceptionFilter.html":{}}}],["exception.getstatus",{"_index":360,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.name",{"_index":666,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["exceptionfilter",{"_index":341,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{}}}],["executioncontext",{"_index":676,"title":{},"body":{"guards/WsJwtGuard.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":637,"title":{},"body":{"classes/UserRepository.html":{}}}],["expiresin",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"classes/RoomRepository.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/RoomsModule.html":{},"overview.html":{}}}],["express",{"_index":352,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":379,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"classes/Room.html":{},"classes/RoomRepository.html":{},"classes/TimeStampEntity.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/WsExceptionFilter.html":{}}}],["extractjwt",{"_index":377,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":383,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":523,"title":{},"body":{"classes/QueryFailedExceptionFilter.html":{},"coverage.html":{}}}],["false",{"_index":385,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/Room.html":{},"classes/TimeStampEntity.html":{},"classes/User.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"classes/RoomRepository.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["filter.dto",{"_index":476,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["filter.dto.ts",{"_index":330,"title":{},"body":{"classes/GetMessageFilterDto.html":{},"coverage.html":{}}}],["filter.dto.ts:10",{"_index":333,"title":{},"body":{"classes/GetMessageFilterDto.html":{}}}],["filter.dto.ts:17",{"_index":332,"title":{},"body":{"classes/GetMessageFilterDto.html":{}}}],["filters/ws",{"_index":260,"title":{},"body":{"classes/ChatGateway.html":{}}}],["following",{"_index":791,"title":{},"body":{"index.html":{}}}],["found",{"_index":511,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["found.save",{"_index":520,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/UsersService.html":{}}}],["foundroom",{"_index":296,"title":{},"body":{"classes/ChatGateway.html":{}}}],["foundroom.name",{"_index":302,"title":{},"body":{"classes/ChatGateway.html":{}}}],["framework",{"_index":766,"title":{},"body":{"index.html":{}}}],["function",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":761,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generics/timestamp.entities",{"_index":415,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/User.html":{}}}],["get('/:id",{"_index":461,"title":{},"body":{"controllers/MessagesController.html":{}}}],["getallmessages",{"_index":450,"title":{},"body":{"controllers/MessagesController.html":{}}}],["getallmessages(@query",{"_index":479,"title":{},"body":{"controllers/MessagesController.html":{}}}],["getallmessages(getmessagefilterdto",{"_index":458,"title":{},"body":{"controllers/MessagesController.html":{}}}],["getmessagebyid",{"_index":451,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["getmessagebyid(@param('id",{"_index":481,"title":{},"body":{"controllers/MessagesController.html":{}}}],["getmessagebyid(id",{"_index":460,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["getmessagefilterdto",{"_index":328,"title":{"classes/GetMessageFilterDto.html":{}},"body":{"classes/GetMessageFilterDto.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"coverage.html":{}}}],["getmessages",{"_index":498,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getmessages(getmessagefilterdto",{"_index":504,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getroombyname",{"_index":564,"title":{},"body":{"injectables/RoomsService.html":{}}}],["getroombyname(name",{"_index":568,"title":{},"body":{"injectables/RoomsService.html":{}}}],["getrooms",{"_index":565,"title":{},"body":{"injectables/RoomsService.html":{}}}],["getting",{"_index":763,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":471,"title":{},"body":{"controllers/MessagesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuserbyclientid",{"_index":641,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyclientid(clientid",{"_index":646,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusername",{"_index":642,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyusername(username",{"_index":648,"title":{},"body":{"injectables/UsersService.html":{}}}],["getusers",{"_index":643,"title":{},"body":{"injectables/UsersService.html":{}}}],["grow",{"_index":805,"title":{},"body":{"index.html":{}}}],["guard",{"_index":667,"title":{"guards/WsJwtGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":669,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["handleconnection",{"_index":213,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleconnection(client",{"_index":233,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handledisconnect",{"_index":214,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handledisconnect(client",{"_index":237,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handlemessage",{"_index":215,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handlemessage(client",{"_index":239,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleroomjoin",{"_index":216,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleroomjoin(client",{"_index":244,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleroomleave",{"_index":217,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleroomleave(client",{"_index":247,"title":{},"body":{"classes/ChatGateway.html":{}}}],["hash",{"_index":611,"title":{},"body":{"classes/User.html":{}}}],["hashpassword",{"_index":616,"title":{},"body":{"classes/UserRepository.html":{}}}],["hashpassword(password",{"_index":618,"title":{},"body":{"classes/UserRepository.html":{}}}],["here",{"_index":814,"title":{},"body":{"index.html":{}}}],["host",{"_index":346,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/WsExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":356,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{}}}],["host.switchtows().getclient",{"_index":663,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["http://127.0.0.1:8080",{"_index":794,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":345,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":338,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://nestjs.com",{"_index":820,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":527,"title":{},"body":{"classes/QueryFailedExceptionFilter.html":{}}}],["id",{"_index":389,"title":{},"body":{"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/Room.html":{},"classes/User.html":{}}}],["identifier",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["if(!found",{"_index":513,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/RoomsService.html":{}}}],["if(!user",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["if(!username",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(e.code",{"_index":633,"title":{},"body":{"classes/UserRepository.html":{}}}],["if(result.affected",{"_index":516,"title":{},"body":{"injectables/MessagesService.html":{}}}],["if(user",{"_index":288,"title":{},"body":{"classes/ChatGateway.html":{},"classes/UserRepository.html":{}}}],["ignoreexpiration",{"_index":384,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":206,"title":{},"body":{"classes/ChatGateway.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{},"guards/WsJwtGuard.html":{}}}],["import",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"classes/RoomRepository.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{}}}],["imports",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/RoomsModule.html":{}}}],["index",{"_index":76,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"injectables/RoomsService.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"classes/RoomRepository.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{}}}],["inherited",{"_index":409,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/User.html":{}}}],["inject",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":172,"title":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MessagesService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MessagesService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MessagesService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MessagesService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["installation",{"_index":768,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":770,"title":{},"body":{"index.html":{}}}],["interface",{"_index":190,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"overview.html":{}}}],["interface.ts",{"_index":369,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":367,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["internalservererrorexception",{"_index":625,"title":{},"body":{"classes/UserRepository.html":{}}}],["isdefined",{"_index":122,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{}}}],["isdefined()@isnumber()@isnotempty",{"_index":320,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["isdefined()@isstring()@isnotempty",{"_index":322,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{}}}],["isdefined()@isstring()@isnotempty()@minlength(4)@maxlength(20",{"_index":120,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["isdefined()@isstring()@isnotempty()@minlength(8)@maxlength(20",{"_index":118,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["isglobal",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":325,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{}}}],["isnotempty",{"_index":124,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty,isin",{"_index":588,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isnumber",{"_index":327,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{}}}],["isnumberstring",{"_index":334,"title":{},"body":{"classes/GetMessageFilterDto.html":{}}}],["isoptional",{"_index":326,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{}}}],["isoptional()@isdefined()@isnotempty()@isnumber()@transform(parseint",{"_index":331,"title":{},"body":{"classes/GetMessageFilterDto.html":{}}}],["isstring",{"_index":123,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{}}}],["join",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["joincolumn",{"_index":417,"title":{},"body":{"classes/Message.html":{},"classes/User.html":{}}}],["joincolumn({name",{"_index":426,"title":{},"body":{"classes/Message.html":{},"classes/User.html":{}}}],["joined",{"_index":295,"title":{},"body":{"classes/ChatGateway.html":{}}}],["joinedrooms",{"_index":590,"title":{},"body":{"classes/User.html":{}}}],["json",{"_index":362,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["jsonwebtoken",{"_index":681,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["jwt",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/WsJwtGuard.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.gaurd.ts",{"_index":671,"title":{},"body":{"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["jwt.gaurd.ts:10",{"_index":674,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["jwt.gaurd.ts:14",{"_index":677,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["jwt.strategy",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt.verify(authtoken",{"_index":689,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["jwtfromrequest",{"_index":382,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":184,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["jwtservice",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":150,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["left",{"_index":301,"title":{},"body":{"classes/ChatGateway.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/RoomsModule.html":{},"overview.html":{}}}],["letter",{"_index":142,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["license",{"_index":821,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":802,"title":{},"body":{"index.html":{}}}],["link",{"_index":599,"title":{},"body":{"classes/User.html":{}}}],["literal",{"_index":241,"title":{},"body":{"classes/ChatGateway.html":{}}}],["load",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost:8000/docs",{"_index":789,"title":{},"body":{"index.html":{}}}],["logger",{"_index":210,"title":{},"body":{"classes/ChatGateway.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{}}}],["logger('chatgateway",{"_index":225,"title":{},"body":{"classes/ChatGateway.html":{}}}],["logger('wsexceptionfilter",{"_index":660,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["logger(httpexceptionfilter.name",{"_index":342,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["logger(queryfailedexceptionfilter.name",{"_index":524,"title":{},"body":{"classes/QueryFailedExceptionFilter.html":{}}}],["logger(wsjwtguard.name",{"_index":682,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["lower",{"_index":143,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["management",{"_index":840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manytoone",{"_index":418,"title":{},"body":{"classes/Message.html":{},"classes/User.html":{}}}],["manytoone(undefined",{"_index":395,"title":{},"body":{"classes/Message.html":{},"classes/User.html":{}}}],["matches",{"_index":127,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["matches(/(?:(?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":132,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["matching",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"classes/RoomRepository.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":126,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["maxlength(20",{"_index":130,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["message",{"_index":135,"title":{"classes/Message.html":{}},"body":{"classes/AuthCredentialsDto.html":{},"classes/ChatGateway.html":{},"classes/GetMessageFilterDto.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"classes/User.html":{},"classes/WsExceptionFilter.html":{},"coverage.html":{}}}],["message.dto",{"_index":437,"title":{},"body":{"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["message.dto.ts",{"_index":319,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:12",{"_index":324,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:17",{"_index":321,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:7",{"_index":323,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{}}}],["message.entity",{"_index":435,"title":{},"body":{"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["message.repository",{"_index":495,"title":{},"body":{"modules/MessagesModule.html":{},"injectables/MessagesService.html":{}}}],["message.room",{"_index":445,"title":{},"body":{"classes/MessageRepository.html":{},"classes/Room.html":{}}}],["message.roomid",{"_index":440,"title":{},"body":{"classes/MessageRepository.html":{}}}],["message.save",{"_index":442,"title":{},"body":{"classes/MessageRepository.html":{}}}],["message.text",{"_index":439,"title":{},"body":{"classes/MessageRepository.html":{}}}],["message.user",{"_index":444,"title":{},"body":{"classes/MessageRepository.html":{},"classes/User.html":{}}}],["message.userid",{"_index":441,"title":{},"body":{"classes/MessageRepository.html":{}}}],["messagerepository",{"_index":428,"title":{"classes/MessageRepository.html":{}},"body":{"classes/MessageRepository.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{}}}],["messages",{"_index":448,"title":{},"body":{"controllers/MessagesController.html":{},"classes/Room.html":{},"classes/User.html":{}}}],["messages.controller",{"_index":494,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messages.service",{"_index":474,"title":{},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{}}}],["messages/message.entity",{"_index":543,"title":{},"body":{"classes/Room.html":{},"classes/User.html":{}}}],["messages/messages.module",{"_index":316,"title":{},"body":{"modules/ChatModule.html":{}}}],["messages/messages.service",{"_index":258,"title":{},"body":{"classes/ChatGateway.html":{}}}],["messagescontroller",{"_index":446,"title":{"controllers/MessagesController.html":{}},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messagesmodule",{"_index":14,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesservice",{"_index":220,"title":{"injectables/MessagesService.html":{}},"body":{"classes/ChatGateway.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["metadata",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"injectables/RoomsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{}}}],["migrate:all",{"_index":775,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":125,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(4",{"_index":129,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(8",{"_index":131,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["miscellaneous",{"_index":760,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":801,"title":{},"body":{"index.html":{}}}],["mode",{"_index":778,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/RoomsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/RoomsModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/RoomsModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/auth.service",{"_index":678,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["modules/auth/jwt",{"_index":680,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["modules/auth/user.entity",{"_index":679,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["modules/chat/chat.gateway",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/chat/chat.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/messages/messages.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/rooms/rooms.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":813,"title":{},"body":{"index.html":{}}}],["name",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"injectables/RoomsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{}}}],["namespace",{"_index":263,"title":{},"body":{"classes/ChatGateway.html":{}}}],["nest",{"_index":765,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"guards/WsJwtGuard.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":253,"title":{},"body":{"classes/ChatGateway.html":{},"classes/WsExceptionFilter.html":{},"dependencies.html":{}}}],["new",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MessageRepository.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"injectables/RoomsService.html":{},"classes/UserRepository.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["node",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["node_env=development",{"_index":773,"title":{},"body":{"index.html":{}}}],["node_env=testing",{"_index":784,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":507,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{}}}],["notfoundexception(`message",{"_index":514,"title":{},"body":{"injectables/MessagesService.html":{}}}],["notfoundexception(`room",{"_index":574,"title":{},"body":{"injectables/RoomsService.html":{}}}],["npm",{"_index":769,"title":{},"body":{"index.html":{}}}],["npx",{"_index":795,"title":{},"body":{"index.html":{}}}],["null",{"_index":307,"title":{},"body":{"classes/ChatGateway.html":{},"classes/UserRepository.html":{}}}],["nullable",{"_index":594,"title":{},"body":{"classes/User.html":{}}}],["number",{"_index":144,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/Room.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["object.assign(found",{"_index":519,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":419,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":537,"title":{},"body":{"classes/Room.html":{},"classes/User.html":{}}}],["ongatewayconnection",{"_index":208,"title":{},"body":{"classes/ChatGateway.html":{}}}],["ongatewaydisconnect",{"_index":209,"title":{},"body":{"classes/ChatGateway.html":{}}}],["ongatewayinit",{"_index":207,"title":{},"body":{"classes/ChatGateway.html":{}}}],["open",{"_index":803,"title":{},"body":{"index.html":{}}}],["optional",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"injectables/RoomsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/RoomsModule.html":{},"overview.html":{}}}],["overview",{"_index":825,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":797,"title":{},"body":{"index.html":{}}}],["package",{"_index":722,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":467,"title":{},"body":{"controllers/MessagesController.html":{}}}],["parameters",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"injectables/RoomsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{}}}],["parseintpipe",{"_index":468,"title":{},"body":{"controllers/MessagesController.html":{}}}],["passport",{"_index":378,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["passportmodule.register",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["passportstrategy",{"_index":375,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":380,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["pasword",{"_index":136,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["patch",{"_index":469,"title":{},"body":{"controllers/MessagesController.html":{}}}],["patch('/:id",{"_index":465,"title":{},"body":{"controllers/MessagesController.html":{}}}],["path",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{}}}],["payload",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["pg",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":811,"title":{},"body":{"index.html":{}}}],["post",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{}}}],["post('/signin",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"controllers/RoomsController.html":{}}}],["primarygeneratedcolumn",{"_index":393,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/User.html":{}}}],["private",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"injectables/RoomsService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{}}}],["process.env.node_env",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":804,"title":{},"body":{"index.html":{}}}],["promise",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/RoomsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":115,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/ChatGateway.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"classes/Message.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/RoomsModule.html":{},"overview.html":{}}}],["query",{"_index":470,"title":{},"body":{"controllers/MessagesController.html":{}}}],["queryfailederror",{"_index":525,"title":{},"body":{"classes/QueryFailedExceptionFilter.html":{},"classes/WsExceptionFilter.html":{}}}],["queryfailedexceptionfilter",{"_index":521,"title":{"classes/QueryFailedExceptionFilter.html":{}},"body":{"classes/QueryFailedExceptionFilter.html":{},"coverage.html":{}}}],["read",{"_index":812,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JwtStrategy.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/RoomsService.html":{},"injectables/UsersService.html":{}}}],["referencedcolumnname",{"_index":398,"title":{},"body":{"classes/Message.html":{},"classes/User.html":{}}}],["reflect",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":430,"title":{},"body":{"classes/MessageRepository.html":{},"classes/RoomRepository.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["req",{"_index":835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.user",{"_index":837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":350,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{}}}],["request.url",{"_index":366,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/RoomsModule.html":{},"overview.html":{}}}],["response",{"_index":351,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{}}}],["response.status(httpstatus.bad_request).json(errorresponse",{"_index":534,"title":{},"body":{"classes/QueryFailedExceptionFilter.html":{}}}],["result",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"classes/RoomRepository.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"classes/RoomRepository.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/RoomsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"injectables/RoomsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{}}}],["rimraf",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["room",{"_index":266,"title":{"classes/Room.html":{}},"body":{"classes/ChatGateway.html":{},"classes/Message.html":{},"classes/Room.html":{},"classes/RoomRepository.html":{},"injectables/RoomsService.html":{},"classes/User.html":{},"coverage.html":{}}}],["room.connectedusers",{"_index":610,"title":{},"body":{"classes/User.html":{}}}],["room.entity",{"_index":549,"title":{},"body":{"classes/RoomRepository.html":{},"injectables/RoomsService.html":{}}}],["room.id",{"_index":274,"title":{},"body":{"classes/ChatGateway.html":{}}}],["room.messages",{"_index":427,"title":{},"body":{"classes/Message.html":{}}}],["room.name",{"_index":281,"title":{},"body":{"classes/ChatGateway.html":{}}}],["room.repository",{"_index":561,"title":{},"body":{"modules/RoomsModule.html":{},"injectables/RoomsService.html":{}}}],["room_id",{"_index":397,"title":{},"body":{"classes/Message.html":{},"classes/User.html":{}}}],["roomid",{"_index":273,"title":{},"body":{"classes/ChatGateway.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["roomrepository",{"_index":547,"title":{"classes/RoomRepository.html":{}},"body":{"classes/RoomRepository.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"coverage.html":{}}}],["rooms",{"_index":553,"title":{},"body":{"controllers/RoomsController.html":{}}}],["rooms.controller",{"_index":559,"title":{},"body":{"modules/RoomsModule.html":{}}}],["rooms.service",{"_index":560,"title":{},"body":{"modules/RoomsModule.html":{}}}],["rooms/room.entity",{"_index":423,"title":{},"body":{"classes/Message.html":{},"classes/User.html":{}}}],["rooms/rooms.module",{"_index":315,"title":{},"body":{"modules/ChatModule.html":{}}}],["rooms/rooms.service",{"_index":257,"title":{},"body":{"classes/ChatGateway.html":{}}}],["roomscontroller",{"_index":551,"title":{"controllers/RoomsController.html":{}},"body":{"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"coverage.html":{}}}],["roomsmodule",{"_index":15,"title":{"modules/RoomsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules/RoomsModule.html":{},"modules.html":{},"overview.html":{}}}],["roomsservice",{"_index":219,"title":{"injectables/RoomsService.html":{}},"body":{"classes/ChatGateway.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"coverage.html":{},"overview.html":{}}}],["rootpath",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":774,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":799,"title":{},"body":{"index.html":{}}}],["salt",{"_index":591,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["secret",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":386,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sent",{"_index":280,"title":{},"body":{"classes/ChatGateway.html":{}}}],["server",{"_index":227,"title":{},"body":{"classes/ChatGateway.html":{}}}],["servestaticmodule",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["setdescription('the",{"_index":841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settitle('task",{"_index":839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setversion('1.0",{"_index":842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signin",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(authcredentialsdto",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signup(@body",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(authcredentialsdto",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(undefined",{"_index":620,"title":{},"body":{"classes/UserRepository.html":{}}}],["socket",{"_index":234,"title":{},"body":{"classes/ChatGateway.html":{}}}],["socket.io",{"_index":254,"title":{},"body":{"classes/ChatGateway.html":{},"dependencies.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"classes/RoomRepository.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"index.html":{}}}],["special",{"_index":145,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["sponsors",{"_index":807,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.module.ts",{"_index":832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":762,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../swagger.options.ts",{"_index":833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/filters/http",{"_index":339,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/filters/query",{"_index":522,"title":{},"body":{"classes/QueryFailedExceptionFilter.html":{},"coverage.html":{}}}],["src/filters/ws",{"_index":658,"title":{},"body":{"classes/WsExceptionFilter.html":{},"coverage.html":{}}}],["src/gaurds/ws",{"_index":670,"title":{},"body":{"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["src/generics/timestamp.entities.ts",{"_index":575,"title":{},"body":{"classes/TimeStampEntity.html":{},"coverage.html":{}}}],["src/generics/timestamp.entities.ts:11",{"_index":578,"title":{},"body":{"classes/TimeStampEntity.html":{}}}],["src/generics/timestamp.entities.ts:5",{"_index":577,"title":{},"body":{"classes/TimeStampEntity.html":{}}}],["src/generics/timestamp.entities.ts:8",{"_index":579,"title":{},"body":{"classes/TimeStampEntity.html":{}}}],["src/main.ts",{"_index":704,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:17",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:26",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:10",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:13",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:17",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:26",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/dto/auth",{"_index":113,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/update",{"_index":584,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/auth/get",{"_index":709,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/jwt",{"_index":368,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/modules/auth/jwt.strategy.ts",{"_index":370,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/jwt.strategy.ts:18",{"_index":374,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/jwt.strategy.ts:9",{"_index":372,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/user.entity.ts",{"_index":589,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/modules/auth/user.entity.ts:14",{"_index":596,"title":{},"body":{"classes/User.html":{}}}],["src/modules/auth/user.entity.ts:20",{"_index":603,"title":{},"body":{"classes/User.html":{}}}],["src/modules/auth/user.entity.ts:26",{"_index":600,"title":{},"body":{"classes/User.html":{}}}],["src/modules/auth/user.entity.ts:29",{"_index":602,"title":{},"body":{"classes/User.html":{}}}],["src/modules/auth/user.entity.ts:32",{"_index":595,"title":{},"body":{"classes/User.html":{}}}],["src/modules/auth/user.entity.ts:35",{"_index":601,"title":{},"body":{"classes/User.html":{}}}],["src/modules/auth/user.entity.ts:39",{"_index":597,"title":{},"body":{"classes/User.html":{}}}],["src/modules/auth/user.entity.ts:45",{"_index":598,"title":{},"body":{"classes/User.html":{}}}],["src/modules/auth/user.entity.ts:47",{"_index":605,"title":{},"body":{"classes/User.html":{}}}],["src/modules/auth/user.repository.ts",{"_index":615,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/modules/auth/user.repository.ts:25",{"_index":623,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/modules/auth/user.repository.ts:34",{"_index":619,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/modules/auth/user.repository.ts:9",{"_index":621,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/modules/auth/users.service.ts",{"_index":640,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/auth/users.service.ts:11",{"_index":650,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/auth/users.service.ts:15",{"_index":649,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/auth/users.service.ts:19",{"_index":647,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/auth/users.service.ts:23",{"_index":652,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/auth/users.service.ts:8",{"_index":645,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/chat/chat.gateway.ts",{"_index":205,"title":{},"body":{"classes/ChatGateway.html":{},"coverage.html":{}}}],["src/modules/chat/chat.gateway.ts:18",{"_index":221,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/modules/chat/chat.gateway.ts:23",{"_index":229,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/modules/chat/chat.gateway.ts:25",{"_index":226,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/modules/chat/chat.gateway.ts:27",{"_index":231,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/modules/chat/chat.gateway.ts:32",{"_index":243,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/modules/chat/chat.gateway.ts:46",{"_index":246,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/modules/chat/chat.gateway.ts:63",{"_index":249,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/modules/chat/chat.gateway.ts:71",{"_index":236,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/modules/chat/chat.gateway.ts:75",{"_index":238,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/modules/chat/chat.module.ts",{"_index":312,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/modules/messages/dto/create",{"_index":318,"title":{},"body":{"classes/CreateMessageDto.html":{},"coverage.html":{}}}],["src/modules/messages/dto/get",{"_index":329,"title":{},"body":{"classes/GetMessageFilterDto.html":{},"coverage.html":{}}}],["src/modules/messages/dto/update",{"_index":582,"title":{},"body":{"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["src/modules/messages/message.entity.ts",{"_index":387,"title":{},"body":{"classes/Message.html":{},"coverage.html":{}}}],["src/modules/messages/message.entity.ts:12",{"_index":403,"title":{},"body":{"classes/Message.html":{}}}],["src/modules/messages/message.entity.ts:15",{"_index":406,"title":{},"body":{"classes/Message.html":{}}}],["src/modules/messages/message.entity.ts:18",{"_index":401,"title":{},"body":{"classes/Message.html":{}}}],["src/modules/messages/message.entity.ts:22",{"_index":405,"title":{},"body":{"classes/Message.html":{}}}],["src/modules/messages/message.entity.ts:26",{"_index":399,"title":{},"body":{"classes/Message.html":{}}}],["src/modules/messages/message.entity.ts:9",{"_index":394,"title":{},"body":{"classes/Message.html":{}}}],["src/modules/messages/message.repository.ts",{"_index":429,"title":{},"body":{"classes/MessageRepository.html":{},"coverage.html":{}}}],["src/modules/messages/message.repository.ts:7",{"_index":433,"title":{},"body":{"classes/MessageRepository.html":{}}}],["src/modules/messages/messages.controller.ts",{"_index":447,"title":{},"body":{"controllers/MessagesController.html":{},"coverage.html":{}}}],["src/modules/messages/messages.controller.ts:16",{"_index":459,"title":{},"body":{"controllers/MessagesController.html":{}}}],["src/modules/messages/messages.controller.ts:21",{"_index":462,"title":{},"body":{"controllers/MessagesController.html":{}}}],["src/modules/messages/messages.controller.ts:27",{"_index":454,"title":{},"body":{"controllers/MessagesController.html":{}}}],["src/modules/messages/messages.controller.ts:32",{"_index":457,"title":{},"body":{"controllers/MessagesController.html":{}}}],["src/modules/messages/messages.controller.ts:37",{"_index":466,"title":{},"body":{"controllers/MessagesController.html":{}}}],["src/modules/messages/messages.module.ts",{"_index":493,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/modules/messages/messages.service.ts",{"_index":497,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/modules/messages/messages.service.ts:10",{"_index":500,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/modules/messages/messages.service.ts:13",{"_index":505,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/modules/messages/messages.service.ts:17",{"_index":501,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/modules/messages/messages.service.ts:21",{"_index":503,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/modules/messages/messages.service.ts:28",{"_index":502,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/modules/messages/messages.service.ts:34",{"_index":506,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/modules/rooms/room.entity.ts",{"_index":535,"title":{},"body":{"classes/Room.html":{},"coverage.html":{}}}],["src/modules/rooms/room.entity.ts:10",{"_index":540,"title":{},"body":{"classes/Room.html":{}}}],["src/modules/rooms/room.entity.ts:13",{"_index":542,"title":{},"body":{"classes/Room.html":{}}}],["src/modules/rooms/room.entity.ts:16",{"_index":541,"title":{},"body":{"classes/Room.html":{}}}],["src/modules/rooms/room.entity.ts:19",{"_index":539,"title":{},"body":{"classes/Room.html":{}}}],["src/modules/rooms/room.repository.ts",{"_index":548,"title":{},"body":{"classes/RoomRepository.html":{},"coverage.html":{}}}],["src/modules/rooms/rooms.controller.ts",{"_index":552,"title":{},"body":{"controllers/RoomsController.html":{},"coverage.html":{}}}],["src/modules/rooms/rooms.module.ts",{"_index":558,"title":{},"body":{"modules/RoomsModule.html":{}}}],["src/modules/rooms/rooms.service.ts",{"_index":563,"title":{},"body":{"injectables/RoomsService.html":{},"coverage.html":{}}}],["src/modules/rooms/rooms.service.ts:10",{"_index":570,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:14",{"_index":569,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:7",{"_index":567,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/options/swagger.options.ts",{"_index":718,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":776,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":779,"title":{},"body":{"index.html":{}}}],["started",{"_index":764,"title":{"index.html":{}},"body":{}}],["starter",{"_index":767,"title":{},"body":{"index.html":{}}}],["statements",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["status",{"_index":359,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/WsExceptionFilter.html":{}}}],["status(status",{"_index":361,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":363,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":815,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":376,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":117,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/ChatGateway.html":{},"classes/CreateMessageDto.html":{},"interfaces/JwtPayload.html":{},"classes/Message.html":{},"classes/Room.html":{},"injectables/RoomsService.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["subscribemessage",{"_index":250,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('chattoserver",{"_index":242,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('joinroom",{"_index":245,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('leaveroom",{"_index":248,"title":{},"body":{"classes/ChatGateway.html":{}}}],["super",{"_index":381,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":800,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":823,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":751,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["swaggeroptions",{"_index":719,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":780,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["test:covapi",{"_index":786,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":785,"title":{},"body":{"index.html":{}}}],["tests",{"_index":782,"title":{},"body":{"index.html":{}}}],["text",{"_index":271,"title":{},"body":{"classes/ChatGateway.html":{},"classes/CreateMessageDto.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"classes/UpdateMessageDto.html":{}}}],["thanks",{"_index":806,"title":{},"body":{"index.html":{}}}],["this.authservice.signin(authcredentialsdto",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(authcredentialsdto",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(jwtpayload",{"_index":691,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["this.configservice.get('secret",{"_index":690,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["this.create",{"_index":627,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.findone",{"_index":638,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.getmessagebyid(id",{"_index":518,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getuserbyusername(username",{"_index":657,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashpassword(password",{"_index":631,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.jwtservice.sign(payload",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.log('initialized",{"_index":265,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.logger.log(`${exception",{"_index":662,"title":{},"body":{"classes/WsExceptionFilter.html":{}}}],["this.logger.log(`client",{"_index":278,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.logger.log(`user",{"_index":693,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["this.logger.log(exception",{"_index":354,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{}}}],["this.messagerepository.createmessage(createmessagedto",{"_index":510,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagerepository.delete(id",{"_index":515,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagerepository.find",{"_index":509,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagerepository.findone(id",{"_index":512,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagesservice.createmessage",{"_index":270,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.messagesservice.createmessage(createmessagedto",{"_index":485,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.messagesservice.deletemessage(id",{"_index":487,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.messagesservice.getmessagebyid(id",{"_index":482,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.messagesservice.getmessages(getmessagefilterdto",{"_index":480,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.messagesservice.updatemessage(id",{"_index":489,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.password",{"_index":614,"title":{},"body":{"classes/User.html":{}}}],["this.roomrepository.find",{"_index":572,"title":{},"body":{"injectables/RoomsService.html":{}}}],["this.roomrepository.findone({name",{"_index":573,"title":{},"body":{"injectables/RoomsService.html":{}}}],["this.roomsservice.getroombyname(data.room",{"_index":268,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.salt",{"_index":613,"title":{},"body":{"classes/User.html":{}}}],["this.userrepository.find",{"_index":654,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.userrepository.findone({clientid",{"_index":656,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone({username",{"_index":655,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.signup(authcredentialsdto",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.validateuserpassword(authcredentialsdto",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getuserbyclientid(client.id",{"_index":269,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.userservice.getuserbyusername(data.username",{"_index":287,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.userservice.updateuser(data.username",{"_index":291,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.userservice.updateuser(user.username",{"_index":308,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.wss.to(room.name).emit('chattoclient",{"_index":277,"title":{},"body":{"classes/ChatGateway.html":{}}}],["throw",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JwtStrategy.html":{},"injectables/MessagesService.html":{},"injectables/RoomsService.html":{},"classes/UserRepository.html":{}}}],["timestamp",{"_index":364,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{}}}],["timestampentity",{"_index":388,"title":{"classes/TimeStampEntity.html":{}},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/TimeStampEntity.html":{},"classes/User.html":{},"coverage.html":{}}}],["timestampentity:11",{"_index":412,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/User.html":{}}}],["timestampentity:5",{"_index":410,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/User.html":{}}}],["timestampentity:8",{"_index":414,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/User.html":{}}}],["topsecrethighlyclassified=d",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["touch",{"_index":816,"title":{},"body":{"index.html":{}}}],["transform",{"_index":335,"title":{},"body":{"classes/GetMessageFilterDto.html":{}}}],["transform(parseint",{"_index":337,"title":{},"body":{"classes/GetMessageFilterDto.html":{}}}],["transformer",{"_index":336,"title":{},"body":{"classes/GetMessageFilterDto.html":{},"dependencies.html":{}}}],["true",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"classes/User.html":{}}}],["try",{"_index":267,"title":{},"body":{"classes/ChatGateway.html":{},"classes/UserRepository.html":{}}}],["ts",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["tsconfig.json",{"_index":798,"title":{},"body":{"index.html":{}}}],["type",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"injectables/RoomsService.html":{},"classes/TimeStampEntity.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/WsExceptionFilter.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["typeorm",{"_index":421,"title":{},"body":{"classes/Message.html":{},"classes/MessageRepository.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/Room.html":{},"classes/RoomRepository.html":{},"classes/TimeStampEntity.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/WsExceptionFilter.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MessagesModule.html":{},"modules/RoomsModule.html":{}}}],["typeormmodule.forfeature([messagerepository",{"_index":496,"title":{},"body":{"modules/MessagesModule.html":{}}}],["typeormmodule.forfeature([roomrepository",{"_index":562,"title":{},"body":{"modules/RoomsModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forrootasync",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["types/express",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["types/node",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":758,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["ui",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception('invalid",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":538,"title":{},"body":{"classes/Room.html":{},"classes/User.html":{}}}],["undefined)@joincolumn({name",{"_index":396,"title":{},"body":{"classes/Message.html":{},"classes/User.html":{}}}],["unique",{"_index":420,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/User.html":{}}}],["unique(['name",{"_index":545,"title":{},"body":{"classes/Room.html":{}}}],["unique(['username",{"_index":609,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":781,"title":{},"body":{"index.html":{}}}],["update",{"_index":581,"title":{},"body":{"classes/TimeStampEntity.html":{}}}],["updated_at",{"_index":392,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/TimeStampEntity.html":{},"classes/User.html":{}}}],["updatedatecolumn",{"_index":413,"title":{},"body":{"classes/Message.html":{},"classes/Room.html":{},"classes/TimeStampEntity.html":{},"classes/User.html":{}}}],["updatemessage",{"_index":452,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["updatemessage(@param('id",{"_index":488,"title":{},"body":{"controllers/MessagesController.html":{}}}],["updatemessage(id",{"_index":463,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["updatemessagedto",{"_index":464,"title":{"classes/UpdateMessageDto.html":{}},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["updateuser",{"_index":644,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuser(username",{"_index":651,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":583,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["upper",{"_index":140,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["url",{"_index":532,"title":{},"body":{"classes/QueryFailedExceptionFilter.html":{}}}],["usefactory",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["usefilters",{"_index":255,"title":{},"body":{"classes/ChatGateway.html":{}}}],["usefilters(new",{"_index":262,"title":{},"body":{"classes/ChatGateway.html":{}}}],["useguards",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(wsjwtguard",{"_index":286,"title":{},"body":{"classes/ChatGateway.html":{}}}],["usepipes(validationpipe",{"_index":483,"title":{},"body":{"controllers/MessagesController.html":{}}}],["user",{"_index":86,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JwtStrategy.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"classes/Room.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.clientid",{"_index":289,"title":{},"body":{"classes/ChatGateway.html":{}}}],["user.decorator",{"_index":473,"title":{},"body":{"controllers/MessagesController.html":{}}}],["user.decorator.ts",{"_index":710,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":653,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":585,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":587,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:7",{"_index":586,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.entity",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":276,"title":{},"body":{"classes/ChatGateway.html":{}}}],["user.joinedrooms",{"_index":546,"title":{},"body":{"classes/Room.html":{}}}],["user.messages",{"_index":425,"title":{},"body":{"classes/Message.html":{}}}],["user.password",{"_index":630,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.repository",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["user.salt",{"_index":628,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.save",{"_index":632,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.username",{"_index":279,"title":{},"body":{"classes/ChatGateway.html":{},"classes/UserRepository.html":{},"guards/WsJwtGuard.html":{}}}],["user.username:client.id",{"_index":300,"title":{},"body":{"classes/ChatGateway.html":{}}}],["user.validatepassword(password",{"_index":639,"title":{},"body":{"classes/UserRepository.html":{}}}],["user_id",{"_index":404,"title":{},"body":{"classes/Message.html":{}}}],["userid",{"_index":275,"title":{},"body":{"classes/ChatGateway.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/Message.html":{},"classes/MessageRepository.html":{}}}],["username",{"_index":116,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["userrepository",{"_index":159,"title":{"classes/UserRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.service",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{}}}],["userservice",{"_index":222,"title":{},"body":{"classes/ChatGateway.html":{}}}],["usersservice",{"_index":151,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"classes/ChatGateway.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":371,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(undefined",{"_index":373,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatepassword",{"_index":592,"title":{},"body":{"classes/User.html":{}}}],["validatepassword(password",{"_index":604,"title":{},"body":{"classes/User.html":{}}}],["validateuser",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(undefined",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuserpassword",{"_index":617,"title":{},"body":{"classes/UserRepository.html":{}}}],["validateuserpassword(undefined",{"_index":622,"title":{},"body":{"classes/UserRepository.html":{}}}],["validator",{"_index":128,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateMessageDto.html":{},"classes/GetMessageFilterDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":224,"title":{},"body":{"classes/ChatGateway.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/WsExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":700,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":829,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verified",{"_index":694,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["void",{"_index":232,"title":{},"body":{"classes/ChatGateway.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedExceptionFilter.html":{},"classes/WsExceptionFilter.html":{}}}],["watch",{"_index":777,"title":{},"body":{"index.html":{}}}],["weak",{"_index":137,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["website",{"_index":819,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":251,"title":{},"body":{"classes/ChatGateway.html":{}}}],["websocketserver",{"_index":228,"title":{},"body":{"classes/ChatGateway.html":{}}}],["wsexception",{"_index":252,"title":{},"body":{"classes/ChatGateway.html":{},"classes/WsExceptionFilter.html":{}}}],["wsexception(e.message",{"_index":285,"title":{},"body":{"classes/ChatGateway.html":{}}}],["wsexceptionfilter",{"_index":259,"title":{"classes/WsExceptionFilter.html":{}},"body":{"classes/ChatGateway.html":{},"classes/WsExceptionFilter.html":{},"coverage.html":{}}}],["wsjwtguard",{"_index":668,"title":{"guards/WsJwtGuard.html":{}},"body":{"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["wss",{"_index":211,"title":{},"body":{"classes/ChatGateway.html":{}}}],["you'd",{"_index":810,"title":{},"body":{"index.html":{}}}],["z",{"_index":134,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["z])(?=.*[a",{"_index":133,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/RoomsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nRoomsModule\n\nRoomsModule\n\nAppModule -->\n\nRoomsModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            RoomsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport config from '../config/config';\nimport {ServeStaticModule} from \"@nestjs/serve-static\";\nimport { join } from 'path';\nimport { ChatGateway } from './modules/chat/chat.gateway';\nimport {ChatModule} from \"./modules/chat/chat.module\";\nimport { MessagesModule } from './modules/messages/messages.module';\nimport { RoomsModule } from './modules/rooms/rooms.module';\n\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ \n      isGlobal: true,\n      load: [config],\n      envFilePath: !ENV ? './env/.env' : `./env/.${ENV}.env`,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (config: ConfigService) => {\n        console.log('aaaaaaaaaaaaaaaa: ', config.get('database'))\n        return config.get('database');\n      },\n      inject: [ConfigService]\n    }),\n    AuthModule,\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '../../', 'client'),\n    }),\n    ChatModule,\n    MessagesModule,\n    RoomsModule\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n            \n                Description\n            \n            \n                Auth controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                signIn\n                            \n                            \n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \nsignIn(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:26\n                \n            \n\n\n            \n                \n                    SignIn a user with his email and password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \nsignUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:17\n                \n            \n\n\n            \n                \n                    SignUp a user with his email and password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UseGuards } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto';\n\n/**\n * Auth controller\n */\n@Controller('auth')\nexport class AuthController {\n    constructor(private readonly authService: AuthService){}\n\n    /**\n     * SignUp a user with his email and password\n     * @body AuthCredentialsDto User email and password\n     */\n    @Post('/signup')\n    signUp(@Body() authCredentialsDto: AuthCredentialsDto): Promise{\n        return this.authService.signUp(authCredentialsDto);\n    }\n\n    /**\n     * SignIn a user with his email and password\n     * @body AuthCredentialsDto User email and password\n     */\n    @Post('/signin')\n    signIn(@Body() authCredentialsDto: AuthCredentialsDto): Promise{\n        return this.authService.signIn(authCredentialsDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthCredentialsDto.html":{"url":"classes/AuthCredentialsDto.html","title":"class - AuthCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/auth-credentials.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsString()@IsNotEmpty()@MinLength(8)@MaxLength(20)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/dto/auth-credentials.dto.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsString()@IsNotEmpty()@MinLength(4)@MaxLength(20)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/dto/auth-credentials.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDefined, IsString, IsNotEmpty, MinLength, MaxLength, Matches } from 'class-validator';\n\nexport class AuthCredentialsDto {\n    @IsDefined()\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(4)\n    @MaxLength(20)\n    username: string;\n\n    @IsDefined()\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    @MaxLength(20)\n    // @Matches(/(?:(?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, { message: 'Pasword is too weak, should contain at least 1 upper case letter, 1 lower case letter, 1 number or special character' })\n    password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nUsersService \n\nUsersService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\nUsersService  -->\n\nAuthModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './jwt.strategy';\nimport { UserRepository } from './user.repository';\nimport {UsersService} from \"./users.service\";\n\nconst passportModule = PassportModule.register({ defaultStrategy: 'jwt' });\n\n@Module({\n  imports: [\n    passportModule,\n    JwtModule.register({\n      secret: 'TopSecretHighlyClassified=D',\n      signOptions: {\n        expiresIn: 3600\n      }\n    }),\n    TypeOrmModule.forFeature([UserRepository])\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, UsersService],\n  exports: [JwtStrategy, passportModule, UsersService, AuthService]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(undefined: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto';\nimport { UserRepository } from './user.repository';\nimport {User} from \"./user.entity\";\nimport {JwtPayload} from \"./jwt-payload-interface\";\n\n@Injectable()\nexport class AuthService {\n    constructor(@InjectRepository(UserRepository) private readonly userRepository: UserRepository, private readonly jwtService: JwtService){}\n\n    async signUp(authCredentialsDto: AuthCredentialsDto): Promise {\n        return this.userRepository.signUp(authCredentialsDto);\n    }\n\n    async signIn(authCredentialsDto: AuthCredentialsDto): Promise {\n        const username = await this.userRepository.validateUserPassword(authCredentialsDto);\n        if(!username)\n            throw new UnauthorizedException('Invalid credentials.');\n        const payload  = { username };\n        const accessToken = this.jwtService.sign(payload);\n        return { accessToken };\n    }\n\n    async validateUser({ username }: JwtPayload){\n        const user = await this.userRepository.findOne({ username });\n        if(!user)\n            throw new UnauthorizedException();\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatGateway.html":{"url":"classes/ChatGateway.html","title":"class - ChatGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chat/chat.gateway.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayInit\n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                            \n                                wss\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                afterInit\n                            \n                            \n                                handleConnection\n                            \n                            \n                                    Async\n                                handleDisconnect\n                            \n                            \n                                    Async\n                                handleMessage\n                            \n                            \n                                    Async\n                                handleRoomJoin\n                            \n                            \n                                    Async\n                                handleRoomLeave\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, roomsService: RoomsService, messagesService: MessagesService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/chat/chat.gateway.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roomsService\n                                                  \n                                                        \n                                                                        RoomsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messagesService\n                                                  \n                                                        \n                                                                        MessagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n                    \n                        \n                            Default value : new Logger('ChatGateway')\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/chat/chat.gateway.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wss\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Server\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @WebSocketServer()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/chat/chat.gateway.ts:23\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            afterInit\n                        \n                        \n                    \n                \n            \n            \n                \nafterInit(server: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chat/chat.gateway.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    server\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleConnection\n                        \n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket, ...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chat/chat.gateway.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            handleDisconnect\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleDisconnect(client: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/chat/chat.gateway.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            handleMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessage(client: Socket, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('chatToServer')\n                \n            \n\n            \n                \n                    Defined in src/modules/chat/chat.gateway.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            handleRoomJoin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRoomJoin(client: Socket, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinRoom')\n                \n            \n\n            \n                \n                    Defined in src/modules/chat/chat.gateway.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            handleRoomLeave\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRoomLeave(client: Socket, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('leaveRoom')\n                \n            \n\n            \n                \n                    Defined in src/modules/chat/chat.gateway.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  SubscribeMessage,\n  WebSocketGateway,\n  OnGatewayInit,\n  WebSocketServer,\n  OnGatewayConnection,\n  OnGatewayDisconnect, WsException,\n} from '@nestjs/websockets';\nimport { Socket, Server } from 'socket.io';\nimport {Logger, UseFilters} from '@nestjs/common';\nimport {UsersService} from \"../auth/users.service\";\nimport {RoomsService} from \"../rooms/rooms.service\";\nimport {MessagesService} from \"../messages/messages.service\";\nimport {WsExceptionFilter} from \"../../filters/ws-exception.filter\";\n\n@UseFilters(new WsExceptionFilter())\n@WebSocketGateway({ namespace: '/chat' })\nexport class ChatGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {\n\n  constructor(private readonly userService: UsersService, private readonly roomsService: RoomsService, private readonly messagesService: MessagesService) {\n  }\n\n  @WebSocketServer() wss: Server;\n\n  private logger: Logger = new Logger('ChatGateway');\n\n  afterInit(server: any) {\n    this.logger.log('Initialized!');\n  }\n\n  @SubscribeMessage('chatToServer')\n  async handleMessage(client: Socket, data: { username: string, room: string, message: string }) {\n    try {\n      const room = await this.roomsService.getRoomByName(data.room);\n      const user = await this.userService.getUserByClientId(client.id);\n      await this.messagesService.createMessage({ text: data.message, roomId: room.id, userId: user.id });\n      this.wss.to(room.name).emit('chatToClient', data);\n      this.logger.log(`client: ${user.username} sent message in \"${room.name}\" room, on: ${Date.now()}`);\n    }catch (e) {\n      throw new WsException(e.message);\n    }\n  }\n\n  // @UseGuards(WsJwtGuard)\n  @SubscribeMessage('joinRoom')\n  async handleRoomJoin(client: Socket, data: { username: string, room: string, message: string } ) {\n    try {\n      const room = await this.roomsService.getRoomByName(data.room);\n      const user = await this.userService.getUserByUsername(data.username);\n      if(user){\n        user.clientId = client.id;\n        await this.userService.updateUser(data.username, { clientId: client.id, roomId: room.id });\n        client.join(room.name);\n        client.emit('joinedRoom', room.name);\n        this.logger.log(`client: ${user.username} joined room: ${room.name}, on: ${Date.now()}`);\n      }\n    }catch (e) {\n      throw new WsException(e.message);\n    }\n  }\n\n  @SubscribeMessage('leaveRoom')\n  async handleRoomLeave(client: Socket, data: { username: string, room: string, message: string } ) {\n    const foundRoom = await this.roomsService.getRoomByName(data.room);\n    const user = await this.userService.getUserByUsername(data.username);\n    client.leave(data.room);\n    client.emit('leftRoom', data.room);\n    this.logger.log(`client ${user? user.username:client.id} left room: ${foundRoom.name}, on: ${Date.now()}`);\n  }\n\n  handleConnection(client: Socket, ...args: any[]): any {\n    this.logger.log(`client ${client.id} connected, on: ${Date.now()}`);\n  }\n\n  async handleDisconnect(client: Socket) {\n    try {\n      const user = await this.userService.getUserByClientId(client.id);\n      if (user) {\n        client.server.emit('users-changed', {user: user.username, event: 'left'});\n        user.clientId = null;\n        await this.userService.updateUser(user.username, { clientId: null, roomId: null });\n      }\n      this.logger.log(`client ${user? user.username:client.id} disconnected, on: ${Date.now()}`);\n    }catch (e) {\n      throw new WsException(e.message);\n    }\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nAuthModule->ChatModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nChatModule -->\n\nMessagesModule->ChatModule\n\n\n\n\n\nRoomsModule\n\nRoomsModule\n\nChatModule -->\n\nRoomsModule->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/chat/chat.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            RoomsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ChatGateway } from './chat.gateway';\nimport {AuthModule} from \"../auth/auth.module\";\nimport {RoomsModule} from \"../rooms/rooms.module\";\nimport {MessagesModule} from \"../messages/messages.module\";\n\n@Module({\n    imports: [\n        AuthModule,\n        RoomsModule,\n        MessagesModule\n    ],\n    controllers: [],\n    providers: [ChatGateway],\n})\nexport class ChatModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDto.html":{"url":"classes/CreateMessageDto.html","title":"class - CreateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/messages/dto/create-message.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                roomId\n                            \n                            \n                                text\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roomId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsNumber()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/messages/dto/create-message.dto.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            text\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/messages/dto/create-message.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsNumber()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/messages/dto/create-message.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDefined, IsString, IsNotEmpty, IsIn, IsOptional, IsNumber } from 'class-validator';\n\nexport class CreateMessageDto {\n    @IsDefined()\n    @IsString()\n    @IsNotEmpty()\n    text: string;\n\n    @IsDefined()\n    @IsNumber()\n    @IsNotEmpty()\n    userId: number;\n\n    @IsDefined()\n    @IsNumber()\n    @IsNotEmpty()\n    roomId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetMessageFilterDto.html":{"url":"classes/GetMessageFilterDto.html","title":"class - GetMessageFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetMessageFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/messages/dto/get-message-filter.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                roomId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roomId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsDefined()@IsNotEmpty()@IsNumber()@Transform(parseInt)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/messages/dto/get-message-filter.dto.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsDefined()@IsNotEmpty()@IsNumber()@Transform(parseInt)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/messages/dto/get-message-filter.dto.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsIn, IsDefined, IsString, IsNotEmpty, IsNumberString, IsNumber } from 'class-validator';\nimport {Transform} from \"class-transformer\";\n\nexport class GetMessageFilterDto {\n  @IsOptional()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsNumber()\n  @Transform(parseInt)\n  userId: number;\n\n  @IsOptional()\n  @IsDefined()\n  @IsNotEmpty()\n  @IsNumber()\n  @Transform(parseInt)\n  roomId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/http-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n                    \n                        \n                            Default value : new Logger(HttpExceptionFilter.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/filters/http-exception.filter.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/http-exception.filter.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {ExceptionFilter, Catch, ArgumentsHost, HttpException, Logger} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  private logger: Logger = new Logger(HttpExceptionFilter.name);\n  catch(exception: HttpException, host: ArgumentsHost) {\n    this.logger.log(exception);\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response\n      .status(status)\n      .json({\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        path: request.url,\n      });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt-payload-interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n    username: string;\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/jwt.strategy.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { JwtPayload } from './jwt-payload-interface';\nimport { UserRepository } from './user.repository';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy){\n    constructor(@InjectRepository(UserRepository) private readonly userRepository: UserRepository){\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: 'TopSecretHighlyClassified=D'\n        });\n    }\n\n    async validate({ username }: JwtPayload){\n        const user = await this.userRepository.findOne({ username });\n\n        if(!user)\n            throw new UnauthorizedException();\n\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Message.html":{"url":"classes/Message.html","title":"class - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/messages/message.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        TimeStampEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                room\n                            \n                            \n                                roomId\n                            \n                            \n                                text\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                            \n                                created_at\n                            \n                            \n                                deleted_at\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/messages/message.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            room\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Room\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)@JoinColumn({name: 'room_id', referencedColumnName: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/messages/message.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roomId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({name: 'room_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/messages/message.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            text\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/messages/message.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)@JoinColumn({name: 'user_id', referencedColumnName: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/messages/message.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({name: 'user_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/messages/message.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({update: false})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimeStampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimeStampEntity:5\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimeStampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimeStampEntity:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimeStampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimeStampEntity:8\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TimeStampEntity } from \"../../generics/timestamp.entities\";\nimport {Column, Entity, JoinColumn, ManyToOne, OneToMany, PrimaryGeneratedColumn, Unique} from \"typeorm\";\nimport {User} from \"../auth/user.entity\";\nimport {Room} from \"../rooms/room.entity\";\n\n@Entity('messages')\nexport class Message extends TimeStampEntity {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    text: string;\n\n    @Column({ name: 'user_id' })\n    userId: number;\n\n    @Column({ name: 'room_id' })\n    roomId: number;\n\n    @ManyToOne(() => User, user => user.messages)\n    @JoinColumn({name: 'user_id', referencedColumnName: 'id' })\n    user: User;\n\n    @ManyToOne(() => Room, room => room.messages)\n    @JoinColumn({name: 'room_id', referencedColumnName: 'id' })\n    room: Room;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessageRepository.html":{"url":"classes/MessageRepository.html","title":"class - MessageRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessageRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/messages/message.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(undefined: CreateMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/messages/message.repository.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {EntityRepository, Repository} from \"typeorm\";\nimport {Message} from \"./message.entity\";\nimport {CreateMessageDto} from \"./dto/create-message.dto\";\n\n@EntityRepository(Message)\nexport class MessageRepository extends Repository{\n    async createMessage({ text, roomId, userId }: CreateMessageDto): Promise{\n        const message = new Message();\n        message.text = text;\n        message.roomId = roomId;\n        message.userId = userId;\n        await message.save();\n\n        delete message.user;\n        delete message.room;\n        return message;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MessagesController.html":{"url":"controllers/MessagesController.html","title":"controller - MessagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MessagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/messages/messages.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                messages\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMessage\n                            \n                            \n                                deleteMessage\n                            \n                            \n                                getAllMessages\n                            \n                            \n                                getMessageById\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createMessage\n                        \n                        \n                    \n                \n            \n            \n                \ncreateMessage(createMessageDto: CreateMessageDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/messages/messages.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteMessage\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteMessage(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/messages/messages.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllMessages\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllMessages(getMessageFilterDto: GetMessageFilterDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/messages/messages.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getMessageFilterDto\n                                    \n                                                GetMessageFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMessageById\n                        \n                        \n                    \n                \n            \n            \n                \ngetMessageById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/messages/messages.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateMessage\n                        \n                        \n                    \n                \n            \n            \n                \nupdateMessage(id: number, updateMessageDto: UpdateMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/messages/messages.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Body, Controller, Delete, Get, Param, ParseIntPipe, Patch, Post, Query} from '@nestjs/common';\nimport {User} from \"../auth/user.entity\";\nimport {GetUser} from \"../auth/get-user.decorator\";\nimport {MessagesService} from \"./messages.service\";\nimport {Message} from \"./message.entity\";\nimport {GetMessageFilterDto} from \"./dto/get-message-filter.dto\";\nimport {CreateMessageDto} from \"./dto/create-message.dto\";\nimport {UpdateMessageDto} from \"./dto/update-message.dto\";\n\n@Controller('messages')\nexport class MessagesController {\n  constructor(private readonly messagesService: MessagesService) {\n  }\n\n  @Get()\n  getAllMessages(@Query() getMessageFilterDto: GetMessageFilterDto, @GetUser() user: User): Promise {\n    return this.messagesService.getMessages(getMessageFilterDto);\n  }\n\n  @Get('/:id')\n  getMessageById(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.messagesService.getMessageById(id);\n  }\n\n  @Post()\n  // @UsePipes(ValidationPipe)\n  createMessage(@Body() createMessageDto: CreateMessageDto, @GetUser() user: User): Promise {\n    return this.messagesService.createMessage(createMessageDto);\n  }\n\n  @Delete('/:id')\n  deleteMessage(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.messagesService.deleteMessage(id);\n  }\n\n  @Patch('/:id')\n  updateMessage(@Param('id', ParseIntPipe) id: number, @Body() updateMessageDto: UpdateMessageDto): Promise {\n    return this.messagesService.updateMessage(id, updateMessageDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_exports\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nMessagesService \n\nMessagesService \n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesService  -->\n\nMessagesModule->MessagesService \n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/messages/messages.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MessagesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MessagesController } from './messages.controller';\nimport { MessagesService } from './messages.service';\nimport {TypeOrmModule} from \"@nestjs/typeorm\";\nimport {MessageRepository} from \"./message.repository\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([MessageRepository]),\n  ],\n  controllers: [MessagesController],\n  providers: [MessagesService],\n  exports: [MessagesService]\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/messages/messages.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                    Async\n                                deleteMessage\n                            \n                            \n                                    Async\n                                getMessageById\n                            \n                            \n                                getMessages\n                            \n                            \n                                    Async\n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messageRepository: MessageRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/messages/messages.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messageRepository\n                                                  \n                                                        \n                                                                        MessageRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(createMessageDto: CreateMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/messages/messages.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMessage(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/messages/messages.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMessageById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessageById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/messages/messages.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMessages\n                        \n                        \n                    \n                \n            \n            \n                \ngetMessages(getMessageFilterDto: GetMessageFilterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/messages/messages.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getMessageFilterDto\n                                    \n                                                GetMessageFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMessage(id: number, updateMessageDto: UpdateMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/messages/messages.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable, NotFoundException} from '@nestjs/common';\nimport {InjectRepository} from \"@nestjs/typeorm\";\nimport {MessageRepository} from \"./message.repository\";\nimport {Message} from \"./message.entity\";\nimport {CreateMessageDto} from \"./dto/create-message.dto\";\nimport {UpdateMessageDto} from \"./dto/update-message.dto\";\nimport {GetMessageFilterDto} from \"./dto/get-message-filter.dto\";\n\n@Injectable()\nexport class MessagesService {\n    constructor(@InjectRepository(MessageRepository) private readonly messageRepository: MessageRepository){}\n\n    getMessages(getMessageFilterDto: GetMessageFilterDto){\n        return this.messageRepository.find();\n    }\n\n    async createMessage(createMessageDto: CreateMessageDto): Promise{\n        return this.messageRepository.createMessage(createMessageDto);\n    }\n\n    async getMessageById(id: number): Promise {\n        const found = await this.messageRepository.findOne(id);\n        if(!found)\n            throw new NotFoundException(`Message with ${id} not found.`);\n        return found;\n    }\n\n    async deleteMessage(id: number): Promise{\n        const result = await this.messageRepository.delete(id);\n        if(result.affected === 0)\n            throw new NotFoundException(`Message with ${id} not found.`);\n    }\n\n    async updateMessage(id: number, updateMessageDto: UpdateMessageDto): Promise{\n        let found = await this.getMessageById(id);\n        Object.assign(found, updateMessageDto);\n        return await found.save();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryFailedExceptionFilter.html":{"url":"classes/QueryFailedExceptionFilter.html","title":"class - QueryFailedExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryFailedExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/query-failed-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n                    \n                        \n                            Default value : new Logger(QueryFailedExceptionFilter.name)\n                        \n                    \n                        \n                            \n                                    Defined in src/filters/query-failed-exception.filter.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: QueryFailedError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/query-failed-exception.filter.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            QueryFailedError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {ExceptionFilter, Catch, ArgumentsHost, HttpException, HttpStatus, Logger} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { QueryFailedError } from 'typeorm';\n\n@Catch(QueryFailedError)\nexport class QueryFailedExceptionFilter implements ExceptionFilter {\n  private logger: Logger = new Logger(QueryFailedExceptionFilter.name);\n  catch(exception: QueryFailedError, host: ArgumentsHost) {\n    this.logger.log(exception);\n    const context = host.switchToHttp();\n    const response = context.getResponse();\n    const request = context.getRequest();\n    const { url } = request;\n    const { message } = exception;\n    const errorResponse = {\n      path: url,\n      timestamp: new Date().toISOString(),\n      message,\n    };\n    response.status(HttpStatus.BAD_REQUEST).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Room.html":{"url":"classes/Room.html","title":"class - Room","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Room\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/room.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                        TimeStampEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                connectedUsers\n                            \n                            \n                                id\n                            \n                            \n                                messages\n                            \n                            \n                                name\n                            \n                            \n                                created_at\n                            \n                            \n                                deleted_at\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            connectedUsers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/rooms/room.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/rooms/room.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            messages\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Message[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/rooms/room.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/rooms/room.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({update: false})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimeStampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimeStampEntity:5\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimeStampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimeStampEntity:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimeStampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimeStampEntity:8\n\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TimeStampEntity } from \"../../generics/timestamp.entities\";\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn, Unique } from \"typeorm\";\nimport { Message } from \"../messages/message.entity\";\nimport { User } from \"../auth/user.entity\";\n\n@Entity('rooms')\n@Unique(['name'])\nexport class Room extends TimeStampEntity {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    name: string;\n\n    @OneToMany(() => Message, message => message.room)\n    messages: Message[];\n\n    @OneToMany(() => User, user => user.joinedRooms)\n    connectedUsers: User[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomRepository.html":{"url":"classes/RoomRepository.html","title":"class - RoomRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/room.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {EntityRepository, Repository} from \"typeorm\";\nimport {Room} from \"./room.entity\";\n\n@EntityRepository(Room)\nexport class RoomRepository extends Repository{}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoomsController.html":{"url":"controllers/RoomsController.html","title":"controller - RoomsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoomsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/rooms.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                rooms\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('rooms')\nexport class RoomsController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoomsModule.html":{"url":"modules/RoomsModule.html","title":"module - RoomsModule","body":"\n                   \n\n\n\n\n    Modules\n    RoomsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RoomsModule\n\n\n\ncluster_RoomsModule_exports\n\n\n\ncluster_RoomsModule_providers\n\n\n\n\nRoomsService \n\nRoomsService \n\n\n\nRoomsModule\n\nRoomsModule\n\nRoomsService  -->\n\nRoomsModule->RoomsService \n\n\n\n\n\nRoomsService\n\nRoomsService\n\nRoomsModule -->\n\nRoomsService->RoomsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/rooms/rooms.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoomsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoomsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoomsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RoomsController } from './rooms.controller';\nimport { RoomsService } from './rooms.service';\nimport {RoomRepository} from \"./room.repository\";\nimport {TypeOrmModule} from \"@nestjs/typeorm\";\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([RoomRepository]),\n  ],\n  controllers: [RoomsController],\n  providers: [RoomsService],\n  exports: [RoomsService]\n})\nexport class RoomsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoomsService.html":{"url":"injectables/RoomsService.html","title":"injectable - RoomsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RoomsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/rooms.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getRoomByName\n                            \n                            \n                                getRooms\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roomRepository: RoomRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/rooms/rooms.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roomRepository\n                                                  \n                                                        \n                                                                        RoomRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRoomByName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRoomByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/rooms/rooms.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRooms\n                        \n                        \n                    \n                \n            \n            \n                \ngetRooms()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/rooms/rooms.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable, NotFoundException} from '@nestjs/common';\nimport {Room} from \"./room.entity\";\nimport {InjectRepository} from \"@nestjs/typeorm\";\nimport { RoomRepository } from \"./room.repository\"\n\n@Injectable()\nexport class RoomsService {\n    constructor(@InjectRepository(RoomRepository) private readonly roomRepository: RoomRepository){}\n\n    getRooms(){\n        return this.roomRepository.find();\n    }\n\n    async getRoomByName(name: string): Promise {\n        const found = await this.roomRepository.findOne({name });\n        if(!found)\n            throw new NotFoundException(`Room with name: ${name} not found.`);\n        return found;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TimeStampEntity.html":{"url":"classes/TimeStampEntity.html","title":"class - TimeStampEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TimeStampEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/generics/timestamp.entities.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                deleted_at\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({update: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/generics/timestamp.entities.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/generics/timestamp.entities.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/generics/timestamp.entities.ts:8\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateDateColumn, UpdateDateColumn, DeleteDateColumn, BaseEntity } from \"typeorm\";\n\nexport class TimeStampEntity extends BaseEntity{\n    @CreateDateColumn({ update: false })\n    created_at: Date;\n\n    @UpdateDateColumn()\n    updated_at: Date;\n\n    @DeleteDateColumn()\n    deleted_at: Date;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMessageDto.html":{"url":"classes/UpdateMessageDto.html","title":"class - UpdateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/messages/dto/update-message.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            text\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/messages/dto/update-message.dto.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsDefined, IsNotEmpty, IsString} from \"class-validator\";\n\nexport class UpdateMessageDto {\n  @IsDefined()\n  @IsString()\n  @IsNotEmpty()\n  text: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/update-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                clientId\n                            \n                            \n                                roomId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clientId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/dto/update-user.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roomId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDefined()@IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/dto/update-user.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDefined, IsString, IsNotEmpty,IsIn } from 'class-validator';\n\nexport class UpdateUserDto {\n    @IsDefined()\n    @IsString()\n    @IsNotEmpty()\n    clientId: string;\n\n    @IsDefined()\n    @IsString()\n    @IsNotEmpty()\n    roomId: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/user.entity.ts\n        \n\n            \n                Description\n            \n            \n                User entity\n\n            \n\n            \n                Extends\n            \n            \n                        TimeStampEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                clientId\n                            \n                            \n                                id\n                            \n                            \n                                joinedRooms\n                            \n                            \n                                messages\n                            \n                            \n                                password\n                            \n                            \n                                roomId\n                            \n                            \n                                salt\n                            \n                            \n                                username\n                            \n                            \n                                created_at\n                            \n                            \n                                deleted_at\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clientId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({name: 'client_id', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/user.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/user.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            joinedRooms\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Room\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)@JoinColumn({name: 'room_id', referencedColumnName: 'id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/user.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            messages\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Message[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/user.entity.ts:45\n                            \n                        \n\n                \n                    \n                        Link with his messages\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/user.entity.ts:26\n                            \n                        \n\n                \n                    \n                        Password\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roomId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({name: 'room_id', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/user.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/user.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/user.entity.ts:20\n                            \n                        \n\n                \n                    \n                        Username\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({update: false})\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimeStampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimeStampEntity:5\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimeStampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimeStampEntity:11\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                            \n                                \n                                    Inherited from         TimeStampEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in         TimeStampEntity:8\n\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/user.entity.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { TimeStampEntity } from \"../../generics/timestamp.entities\";\nimport {Column, Entity, JoinColumn, ManyToOne, OneToMany, PrimaryGeneratedColumn, Unique} from \"typeorm\";\nimport * as bcrypt from 'bcryptjs';\nimport { Message } from \"../messages/message.entity\";\nimport {Room} from \"../rooms/room.entity\";\n\n/**\n * User entity\n */\n@Entity('users')\n@Unique(['username'])\nexport class User extends TimeStampEntity {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    /**\n     * Username\n     */\n    @Column()\n    username: string;\n\n    /**\n     * Password\n     */\n    @Column()\n    password: string;\n\n    @Column()\n    salt: string;\n\n    @Column({ name: 'client_id', nullable: true })\n    clientId: string;\n\n    @Column({ name: 'room_id', nullable: true })\n    roomId: string;\n\n    @ManyToOne(() => Room, room => room.connectedUsers)\n    @JoinColumn({name: 'room_id', referencedColumnName: 'id' })\n    joinedRooms: Room;\n\n    /**\n     * Link with his messages\n     */\n    @OneToMany(() => Message, message => message.user)\n    messages: Message[];\n\n    async validatePassword(password: string): Promise {\n        const hash = await bcrypt.hash(password, this.salt);\n        return hash === this.password;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUserPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/user.repository.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(undefined: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/user.repository.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUserPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUserPassword(undefined: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/user.repository.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from \"typeorm\";\nimport * as bcrypt from 'bcryptjs';\nimport { AuthCredentialsDto } from \"./dto/auth-credentials.dto\";\nimport { User } from \"./user.entity\";\nimport {ConflictException, InternalServerErrorException} from \"@nestjs/common\";\n\n@EntityRepository(User)\nexport class UserRepository extends Repository{\n    async signUp({ username, password }: AuthCredentialsDto): Promise{\n        const user = this.create();\n        user.username = username;\n        user.salt = await bcrypt.genSalt();\n        user.password = await this.hashPassword(password, user.salt);\n\n        try {\n            await user.save();\n        }catch (e) {\n            if(e.code === '23505')\n                throw new ConflictException('Username already exists.');\n            else\n                throw new InternalServerErrorException();\n        }\n    }\n\n    async validateUserPassword({ username, password }: AuthCredentialsDto): Promise{\n        const user = await this.findOne({ username });\n        if(user && await user.validatePassword(password)){\n            return user.username;\n        }else{\n            return null;\n        }\n    }\n\n    private async hashPassword(password: string, salt: string): Promise{\n        return bcrypt.hash(password, salt);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserByClientId\n                            \n                            \n                                    Async\n                                getUserByUsername\n                            \n                            \n                                getUsers\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserByClientId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByClientId(clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/users.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserByUsername\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \ngetUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/users.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(username: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/users.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable, NotFoundException, UnauthorizedException} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserRepository } from './user.repository';\nimport {User} from \"./user.entity\";\nimport {UpdateUserDto} from \"./dto/update-user.dto\";\n\n@Injectable()\nexport class UsersService {\n    constructor(@InjectRepository(UserRepository) private readonly userRepository: UserRepository){}\n\n    getUsers(){\n        return this.userRepository.find();\n    }\n\n    async getUserByUsername(username: string): Promise {\n        return this.userRepository.findOne({username});\n    }\n\n    async getUserByClientId(clientId: string): Promise {\n        return this.userRepository.findOne({clientId});\n    }\n\n    async updateUser(username: string, updateUserDto: UpdateUserDto): Promise{\n        let found = await this.getUserByUsername(username);\n        Object.assign(found, updateUserDto);\n        return found.save();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WsExceptionFilter.html":{"url":"classes/WsExceptionFilter.html","title":"class - WsExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WsExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/ws-exception.filter.ts\n        \n\n\n            \n                Extends\n            \n            \n                        BaseWsExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n                    \n                        \n                            Default value : new Logger('WsExceptionFilter')\n                        \n                    \n                        \n                            \n                                    Defined in src/filters/ws-exception.filter.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception, host)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/ws-exception.filter.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {Catch, Logger, NotFoundException} from '@nestjs/common';\nimport {BaseWsExceptionFilter, WsException} from '@nestjs/websockets';\nimport {QueryFailedError} from \"typeorm\";\n@Catch(Error, NotFoundException, QueryFailedError, WsException)\nexport class WsExceptionFilter extends BaseWsExceptionFilter {\n  private logger: Logger = new Logger('WsExceptionFilter');\n\n  catch(exception, host) {\n    this.logger.log(`${exception}`);\n    const client = host.switchToWs().getClient();\n    client.emit('exception', {\n      status: 'error',\n      message: exception.name\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/WsJwtGuard.html":{"url":"guards/WsJwtGuard.html","title":"guard - WsJwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    WsJwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/gaurds/ws-jwt.gaurd.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/gaurds/ws-jwt.gaurd.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/gaurds/ws-jwt.gaurd.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport {AuthService} from \"../modules/auth/auth.service\";\nimport {User} from \"../modules/auth/user.entity\";\nimport {JwtPayload} from \"../modules/auth/jwt-payload-interface\";\nimport * as jwt from 'jsonwebtoken';\nimport {ConfigService} from \"@nestjs/config\";\n\n@Injectable()\nexport class WsJwtGuard implements CanActivate {\n  private logger: Logger = new Logger(WsJwtGuard.name);\n\n  constructor(private authService: AuthService, private configService: ConfigService) {}\n\n  async canActivate(context: ExecutionContext) {\n    const client = context.switchToWs().getClient();\n    const authHeader = client.data.headers.authorization.split('; ');\n    const authToken = authHeader.substring(7, authHeader.length);\n    const jwtPayload: JwtPayload =  jwt.verify(authToken, this.configService.get('secret'));\n    const user: User = await this.authService.validateUser(jwtPayload);\n    context.switchToWs().getData().user = user;\n    this.logger.log(`user: ${user.username} is verified.`);\n    return Boolean(user);\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/filters/query-failed-exception.filter.ts\n            \n            class\n            QueryFailedExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/filters/ws-exception.filter.ts\n            \n            class\n            WsExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/gaurds/ws-jwt.gaurd.ts\n            \n            guard\n            WsJwtGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/generics/timestamp.entities.ts\n            \n            class\n            TimeStampEntity\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.module.ts\n            \n            variable\n            passportModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/auth-credentials.dto.ts\n            \n            class\n            AuthCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt-payload-interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/user.entity.ts\n            \n            class\n            User\n            \n                30 %\n                (4/13)\n            \n        \n        \n            \n                \n                src/modules/auth/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/chat/chat.gateway.ts\n            \n            class\n            ChatGateway\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/messages/dto/create-message.dto.ts\n            \n            class\n            CreateMessageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/messages/dto/get-message-filter.dto.ts\n            \n            class\n            GetMessageFilterDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/messages/dto/update-message.dto.ts\n            \n            class\n            UpdateMessageDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/messages/message.entity.ts\n            \n            class\n            Message\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/messages/message.repository.ts\n            \n            class\n            MessageRepository\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/messages/messages.controller.ts\n            \n            controller\n            MessagesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/rooms/room.entity.ts\n            \n            class\n            Room\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/rooms/room.repository.ts\n            \n            class\n            RoomRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/rooms/rooms.controller.ts\n            \n            controller\n            RoomsController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/rooms/rooms.service.ts\n            \n            injectable\n            RoomsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/options/swagger.options.ts\n            \n            variable\n            swaggerOptions\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/config : ^0.6.1\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/platform-socket.io : ^7.6.5\n        \n            @nestjs/serve-static : ^2.1.4\n        \n            @nestjs/swagger : ^4.7.9\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            @nestjs/websockets : ^7.6.5\n        \n            @types/express : ^4.17.8\n        \n            @types/node : ^14.14.6\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            swagger-ui-express : ^4.1.6\n        \n            ts-node : ^9.0.0\n        \n            typeorm : ^0.2.29\n        \n            typescript : ^4.0.5\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ NODE_ENV=development npm run migrate:all \n$ npm run start\n\n# watch mode\n$ NODE_ENV=development npm run migrate:all \n$ npm run start:dev\nTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ NODE_ENV=testing npm run migrate:all \n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covAPI-Docs\nSwagger API documentation at localhost:8000/docs\nCode-Docs\nRun the following command and code documentation will be available at http://127.0.0.1:8080\n$ npx @compodoc/compodoc -p tsconfig.json -s  Support\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - 70747H\nWebsite - https://nestjs.com\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoomsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_exports\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_RoomsModule\n\n\n\ncluster_RoomsModule_exports\n\n\n\ncluster_RoomsModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nAuthModule->ChatModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nAuthModule->UsersService \n\n\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nChatModule -->\n\nMessagesModule->ChatModule\n\n\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nMessagesService \n\nMessagesService \n\nMessagesService  -->\n\nMessagesModule->MessagesService \n\n\n\n\n\nRoomsModule\n\nRoomsModule\n\nChatModule -->\n\nRoomsModule->ChatModule\n\n\n\nAppModule -->\n\nRoomsModule->AppModule\n\n\n\n\n\nRoomsService \n\nRoomsService \n\nRoomsService  -->\n\nRoomsModule->RoomsService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nRoomsService\n\nRoomsService\n\nRoomsModule -->\n\nRoomsService->RoomsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    16 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            passportModule   (src/.../auth.module.ts)\n                        \n                        \n                            swaggerOptions   (src/.../swagger.options.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ENV\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.NODE_ENV\n                        \n                    \n\n\n            \n        \n\n    src/modules/auth/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data, ctx: ExecutionContext): User => {\n    const req = ctx.switchToHttp().getRequest();\n    return req.user;\n})\n                        \n                    \n\n\n            \n        \n\n    src/modules/auth/auth.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            passportModule\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : PassportModule.register({ defaultStrategy: 'jwt' })\n                        \n                    \n\n\n            \n        \n\n    src/options/swagger.options.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            swaggerOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new DocumentBuilder()\n    .setTitle('task-management')\n    .setDescription('The test API description')\n    .setVersion('1.0')\n    .addTag('test')\n    .addBearerAuth()\n    .build()\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
